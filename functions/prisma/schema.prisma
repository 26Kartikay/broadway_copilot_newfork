datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [ vector(version: "0.8.1") ]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

enum MessageRole {
  USER
  AI
  SYSTEM
  TOOL
}
enum Gender {
  MALE
  FEMALE
}
enum AgeGroup {
  AGE_13_17
  AGE_18_25
  AGE_26_35
  AGE_36_45
  AGE_46_55
  AGE_55_PLUS
}
enum PendingType {
  NONE
  VIBE_CHECK_IMAGE
  COLOR_ANALYSIS_IMAGE
  ASK_USER_INFO
  FEEDBACK
  TONALITY_SELECTION
  STYLE_STUDIO_MENU  
  THIS_OR_THAT_IMAGE_INPUT
}
enum TaskType {
  SEND_FEEDBACK_REQUEST
  SCHEDULE_WARDROBE_INDEX
  PROCESS_MEMORIES
  UPLOAD_IMAGES
}
enum TaskStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  FAILED
}
enum GraphRunStatus {
  RUNNING
  COMPLETED
  ERROR
  ABORTED
}
enum ConversationStatus {
  OPEN
  CLOSED
}
enum WardrobeItemCategory {
  TOP
  BOTTOM
  ONE_PIECE
  OUTERWEAR
  SHOES
  BAG
  ACCESSORY
}
enum Tonality {
  savage
  friendly
  hype_bff
}
// --- CORE ---

model User {
  id          String @id @default(cuid())
  whatsappId  String @unique
  profileName String @default("")

  inferredGender    Gender?
  inferredAgeGroup  AgeGroup?
  confirmedGender   Gender?
  confirmedAgeGroup AgeGroup?

  lastVibeCheckAt     DateTime?
  lastColorAnalysisAt DateTime?

  createdAt DateTime @default(now())
  
  dailyPromptOptIn Boolean @default(false)


  conversations Conversation[]
  wardrobe      WardrobeItem[]
  memories      Memory[]
  vibeChecks    VibeCheck[]
  colorAnalyses ColorAnalysis[]
  tasks         Task[]
  graphRuns     GraphRun[]

  @@index([createdAt])
}

model Conversation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  status ConversationStatus @default(OPEN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages  Message[]
  graphRuns GraphRun[]
  feedback  Feedback?

  @@index([userId, createdAt])
  @@index([status, createdAt])
}

model Message {
  id              String      @id @default(cuid())
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  role            MessageRole
  intent          String?
  buttonPayload   String?
  pending         PendingType? @default(NONE)

  selectedTonality Tonality? 

  content          Json[] @default([])
  additionalKwargs Json?

  memoriesProcessed Boolean @default(false)
  wardrobeProcessed Boolean @default(false)

  createdAt DateTime @default(now())

  media Media[]

  @@index([conversationId, createdAt])
  @@index([role, createdAt])
  @@index([buttonPayload])
}

// --- MEDIA ---

model Media {
  id        String  @id @default(cuid())
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  twilioUrl  String
  serverUrl  String
  gcsUri     String?
  mimeType   String
  isUploaded Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([messageId])
}

// --- USER PROFILE & ANALYSIS ---

model Memory {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  memory String

  embedding      Unsupported("vector")?
  embeddingModel String?
  embeddingDim   Int?
  embeddingAt    DateTime?

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model VibeCheck {
  id                          String      @id @default(cuid())
  userId                      String
  user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment                     String
  fit_silhouette_score        Float
  fit_silhouette_explanation  String
  color_harmony_score         Float
  color_harmony_explanation   String
  styling_details_score       Float
  styling_details_explanation String
  context_confidence_score    Float
  context_confidence_explanation String
  overall_score               Float
  recommendations             String[]
  prompt                      String
  tonality                    String?   // optional
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}
model ColorAnalysis {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  skin_tone        String?
  eye_color        String?
  hair_color       String?
  undertone        String?
  compliment       String?   // New field to store compliment
  palette_name     String?
  palette_description String?
  colors_suited    Json?
  colors_to_wear   Json?
  colors_to_avoid  Json?

  createdAt        DateTime @default(now())

  @@index([userId, createdAt])
}



model WardrobeItem {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name           String
  description    String
  category       WardrobeItemCategory
  type           String
  subtype        String?
  mainColor      String
  secondaryColor String?
  attributes     Json

  searchDoc String
  keywords  String[]

  embedding      Unsupported("vector")?
  embeddingModel String?
  embeddingDim   Int?
  embeddingAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, category])
  @@index([userId, type])
  @@index([userId, mainColor])
  @@index([userId, createdAt])
  @@index([userId, keywords])
}

// --- AGENT & LOGGING ---

model GraphRun {
  id             String       @id
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  status     GraphRunStatus @default(RUNNING)
  errorTrace String?

  initialState Json
  finalState   Json?

  startTime  DateTime  @default(now())
  endTime    DateTime?
  durationMs Int?

  nodeRuns NodeRun[]

  @@index([conversationId, startTime])
  @@index([userId, startTime])
}

model LLMTrace {
  id        String  @id @default(cuid())
  nodeRunId String
  nodeRun   NodeRun @relation(fields: [nodeRunId], references: [id], onDelete: Cascade)

  model            String
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  costUsd          Decimal? @db.Decimal(10, 6)
  errorTrace       String?

  inputMessages Json
  outputMessage Json?
  rawRequest    Json
  rawResponse   Json?

  startTime  DateTime  @default(now())
  endTime    DateTime?
  durationMs Int?

  @@index([nodeRunId])
}

model NodeRun {
  id         String     @id @default(cuid())
  graphRunId String
  graphRun   GraphRun   @relation(fields: [graphRunId], references: [id], onDelete: Cascade)
  nodeName   String
  startTime  DateTime
  endTime    DateTime?
  durationMs Int?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  llmTraces  LLMTrace[]

  @@index([graphRunId])
}

// --- FEEDBACK ---

model Feedback {
  id             String       @id @default(cuid())
  conversationId String       @unique
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  helpful Boolean?
  comment String?

  createdAt DateTime @default(now())
}

// --- BACKGROUND PROCESSING ---

model Task {
  id     String @id @default(cuid())
  taskId String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type    TaskType
  status  TaskStatus @default(QUEUED)
  payload Json?
  runAt   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, runAt])
  @@index([status, runAt])
}

// --- ADMIN MANAGEMENT ---

model AdminWhitelist {
  id    String @id @default(cuid())
  email String @unique
}

model UserWhitelist {
  id   String @id @default(cuid())
  waId String @unique
}

// --- AUTH FOR ADMINS ---

model Admins {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?

  accounts       AdminAccount[]
  sessions       AdminSession[]
  authenticators AdminAuthenticator[]
}

model AdminAccount {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  admin Admins @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
}

model AdminSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  admin Admins @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AdminVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token], name: "identifier_token")
}

model AdminAuthenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  admin Admins @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
