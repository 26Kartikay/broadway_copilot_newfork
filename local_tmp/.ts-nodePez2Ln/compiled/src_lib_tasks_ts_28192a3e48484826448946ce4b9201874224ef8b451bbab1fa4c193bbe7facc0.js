"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.queueWardrobeIndex = queueWardrobeIndex;
exports.queueMemoryExtraction = queueMemoryExtraction;
exports.queueImageUpload = queueImageUpload;
exports.queueFeedbackRequest = queueFeedbackRequest;
require("dotenv/config");
const tasks_1 = require("@google-cloud/tasks");
const cuid2_1 = require("@paralleldrive/cuid2");
const client_1 = require("@prisma/client");
const errors_1 = require("../utils/errors");
const logger_1 = require("../utils/logger");
const prisma_1 = require("./prisma");
const client = new tasks_1.CloudTasksClient();
const PROJECT_ID = process.env.PROJECT_ID || 'broadway-chatbot';
const CLOUD_FUNCTION_REGION = process.env.CLOUD_FUNCTION_REGION || 'asia-south2';
const CLOUD_TASKS_REGION = process.env.CLOUD_TASKS_REGION || 'asia-south1';
const WARDROBE_FUNCTION_URL = `https://${CLOUD_FUNCTION_REGION}-${PROJECT_ID}.cloudfunctions.net/indexWardrobe`;
const MEMORY_FUNCTION_URL = `https://${CLOUD_FUNCTION_REGION}-${PROJECT_ID}.cloudfunctions.net/storeMemories`;
const IMAGE_UPLOAD_FUNCTION_URL = `https://${CLOUD_FUNCTION_REGION}-${PROJECT_ID}.cloudfunctions.net/imageUpload`;
const FEEDBACK_FUNCTION_URL = `https://${CLOUD_FUNCTION_REGION}-${PROJECT_ID}.cloudfunctions.net/sendFeedbackRequest`;
const SERVICE_ACCOUNT_EMAIL = process.env.CLOUD_TASKS_SERVICE_ACCOUNT;
async function queueTask(queueName, functionUrl, payload, taskType, options = {}) {
    if (!PROJECT_ID || !functionUrl) {
        throw new errors_1.InternalServerError('Missing required environment variables for Cloud Tasks');
    }
    const parent = client.queuePath(PROJECT_ID, CLOUD_TASKS_REGION, queueName);
    const taskId = (0, cuid2_1.createId)();
    const taskName = `${parent}/tasks/${taskId}`;
    const task = {
        httpRequest: {
            httpMethod: 'POST',
            url: functionUrl,
            body: Buffer.from(JSON.stringify(payload)),
            headers: { 'Content-Type': 'application/json' },
            ...(SERVICE_ACCOUNT_EMAIL && {
                oidcToken: {
                    serviceAccountEmail: SERVICE_ACCOUNT_EMAIL,
                    audience: functionUrl,
                },
            }),
        },
        name: taskName,
    };
    if (options.scheduleTime) {
        const milliseconds = options.scheduleTime.getTime();
        task.scheduleTime = {
            seconds: Math.floor(milliseconds / 1000),
            nanos: (milliseconds % 1000) * 1_000_000,
        };
    }
    const [response] = await client.createTask({ parent, task });
    logger_1.logger.info({ taskName: response.name, type: taskType }, `Queued ${taskType} task`);
    const runAt = options.scheduleTime ?? new Date();
    await prisma_1.prisma.task.create({
        data: {
            taskId: taskId,
            userId: payload.userId,
            type: taskType,
            payload,
            runAt,
        },
    });
}
function runTaskInBackground(taskType, runner) {
    setImmediate(() => {
        runner().catch((err) => {
            logger_1.logger.error({ err: err instanceof Error ? err.message : String(err), type: taskType }, `Failed to queue ${taskType} task`);
        });
    });
}
function queueWardrobeIndex(userId, messageId) {
    if (process.env.NODE_ENV === 'development') {
        logger_1.logger.debug({ userId, messageId }, 'Skipping wardrobe index queueing in development');
        return;
    }
    runTaskInBackground(client_1.TaskType.SCHEDULE_WARDROBE_INDEX, () => queueTask('wardrobe-index', WARDROBE_FUNCTION_URL, { userId, messageId }, client_1.TaskType.SCHEDULE_WARDROBE_INDEX));
}
function queueMemoryExtraction(userId, conversationId) {
    if (process.env.NODE_ENV === 'development') {
        logger_1.logger.debug({ userId, conversationId }, 'Skipping memory extraction queueing in development');
        return;
    }
    runTaskInBackground(client_1.TaskType.PROCESS_MEMORIES, () => queueTask('memory-extraction', MEMORY_FUNCTION_URL, { userId, conversationId }, client_1.TaskType.PROCESS_MEMORIES));
}
function queueImageUpload(userId, messageId) {
    if (process.env.NODE_ENV === 'development') {
        logger_1.logger.debug({ userId, messageId }, 'Skipping image upload queueing in development');
        return;
    }
    runTaskInBackground(client_1.TaskType.UPLOAD_IMAGES, () => queueTask('image-upload', IMAGE_UPLOAD_FUNCTION_URL, { userId, messageId }, client_1.TaskType.UPLOAD_IMAGES));
}
function queueFeedbackRequest(userId, conversationId) {
    if (process.env.NODE_ENV === 'development') {
        logger_1.logger.debug({ userId, conversationId }, 'Skipping feedback request queueing in development');
        return;
    }
    const delayMs = Number(process.env.FEEDBACK_REQUEST_DELAY_MS || 60_000);
    const scheduleTime = new Date(Date.now() + delayMs);
    runTaskInBackground(client_1.TaskType.SEND_FEEDBACK_REQUEST, () => queueTask('feedback-request', FEEDBACK_FUNCTION_URL, { userId, conversationId }, client_1.TaskType.SEND_FEEDBACK_REQUEST, { scheduleTime }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,