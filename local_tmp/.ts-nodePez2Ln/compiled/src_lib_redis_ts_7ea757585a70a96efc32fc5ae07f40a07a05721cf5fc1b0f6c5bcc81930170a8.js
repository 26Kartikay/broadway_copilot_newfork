"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectRedis = exports.redis = void 0;
const redis_1 = require("redis");
const logger_1 = require("../utils/logger");
const globalForRedis = global;
exports.redis = globalForRedis.redis ||
    (0, redis_1.createClient)({
        url: process.env.REDIS_URL || 'redis://localhost:6379',
    });
exports.redis.on('error', (err) => logger_1.logger.error({ err: err.message }, 'Redis client error'));
exports.redis.on('connect', () => logger_1.logger.info('Redis client connected'));
exports.redis.on('disconnect', () => logger_1.logger.warn('Redis client disconnected'));
exports.redis.on('reconnecting', () => logger_1.logger.info('Redis client reconnecting'));
exports.redis.on('ready', () => logger_1.logger.info('Redis client ready'));
if (process.env.NODE_ENV !== 'production') {
    globalForRedis.redis = exports.redis;
}
const connectRedis = async () => {
    if (!exports.redis.isOpen) {
        try {
            await exports.redis.connect();
        }
        catch (err) {
            logger_1.logger.error({ err: err instanceof Error ? err.message : String(err), url: process.env.REDIS_URL }, 'Failed to connect to Redis');
            throw err;
        }
    }
    else {
        logger_1.logger.debug('Redis client already connected');
    }
};
exports.connectRedis = connectRedis;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Vzci9zcmMvYXBwL3NyYy9saWIvcmVkaXMudHMiLCJzb3VyY2VzIjpbIi91c3Ivc3JjL2FwcC9zcmMvbGliL3JlZGlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFxQztBQUVyQyw0Q0FBeUM7QUFNekMsTUFBTSxjQUFjLEdBQUcsTUFFdEIsQ0FBQztBQU9XLFFBQUEsS0FBSyxHQUNoQixjQUFjLENBQUMsS0FBSztJQUNwQixJQUFBLG9CQUFZLEVBQUM7UUFDWCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksd0JBQXdCO0tBQ3ZELENBQUMsQ0FBQztBQUNMLGFBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7QUFDckYsYUFBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBTSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7QUFDakUsYUFBSyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBTSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUM7QUFDdkUsYUFBSyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBTSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUM7QUFDekUsYUFBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7QUFFM0QsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxjQUFjLENBQUMsS0FBSyxHQUFHLGFBQUssQ0FBQztBQUMvQixDQUFDO0FBUU0sTUFBTSxZQUFZLEdBQUcsS0FBSyxJQUFtQixFQUFFO0lBQ3BELElBQUksQ0FBQyxhQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDO1lBQ0gsTUFBTSxhQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDeEIsQ0FBQztRQUFDLE9BQU8sR0FBWSxFQUFFLENBQUM7WUFDdEIsZUFBTSxDQUFDLEtBQUssQ0FDVixFQUFFLEdBQUcsRUFBRSxHQUFHLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQ3JGLDRCQUE0QixDQUM3QixDQUFDO1lBQ0YsTUFBTSxHQUFHLENBQUM7UUFDWixDQUFDO0lBQ0gsQ0FBQztTQUFNLENBQUM7UUFDTixlQUFNLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDakQsQ0FBQztBQUNILENBQUMsQ0FBQztBQWRXLFFBQUEsWUFBWSxnQkFjdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdyZWRpcyc7XG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XG5cbi8qKlxuICogR2xvYmFsIFJlZGlzIGNsaWVudCBpbnN0YW5jZSB3aXRoIGNvbm5lY3Rpb24gbWFuYWdlbWVudCBhbmQgZXJyb3IgaGFuZGxpbmcuXG4gKiBVc2VzIHNpbmdsZXRvbiBwYXR0ZXJuIHRvIHByZXZlbnQgbXVsdGlwbGUgY29ubmVjdGlvbnMgaW4gZGV2ZWxvcG1lbnQuXG4gKi9cbmNvbnN0IGdsb2JhbEZvclJlZGlzID0gZ2xvYmFsIGFzIHVua25vd24gYXMge1xuICByZWRpczogUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlQ2xpZW50Pjtcbn07XG5cbi8qKlxuICogUmVkaXMgY2xpZW50IGluc3RhbmNlIGNvbmZpZ3VyZWQgd2l0aCBjb25uZWN0aW9uIFVSTCBmcm9tIGVudmlyb25tZW50LlxuICogU2luZ2xldG9uIHBhdHRlcm4gcHJldmVudHMgbXVsdGlwbGUgY29ubmVjdGlvbnMgZHVyaW5nIGhvdCByZWxvYWRpbmcgaW4gZGV2ZWxvcG1lbnQuXG4gKi9cblxuZXhwb3J0IGNvbnN0IHJlZGlzID1cbiAgZ2xvYmFsRm9yUmVkaXMucmVkaXMgfHxcbiAgY3JlYXRlQ2xpZW50KHtcbiAgICB1cmw6IHByb2Nlc3MuZW52LlJFRElTX1VSTCB8fCAncmVkaXM6Ly9sb2NhbGhvc3Q6NjM3OScsXG4gIH0pO1xucmVkaXMub24oJ2Vycm9yJywgKGVycikgPT4gbG9nZ2VyLmVycm9yKHsgZXJyOiBlcnIubWVzc2FnZSB9LCAnUmVkaXMgY2xpZW50IGVycm9yJykpO1xucmVkaXMub24oJ2Nvbm5lY3QnLCAoKSA9PiBsb2dnZXIuaW5mbygnUmVkaXMgY2xpZW50IGNvbm5lY3RlZCcpKTtcbnJlZGlzLm9uKCdkaXNjb25uZWN0JywgKCkgPT4gbG9nZ2VyLndhcm4oJ1JlZGlzIGNsaWVudCBkaXNjb25uZWN0ZWQnKSk7XG5yZWRpcy5vbigncmVjb25uZWN0aW5nJywgKCkgPT4gbG9nZ2VyLmluZm8oJ1JlZGlzIGNsaWVudCByZWNvbm5lY3RpbmcnKSk7XG5yZWRpcy5vbigncmVhZHknLCAoKSA9PiBsb2dnZXIuaW5mbygnUmVkaXMgY2xpZW50IHJlYWR5JykpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBnbG9iYWxGb3JSZWRpcy5yZWRpcyA9IHJlZGlzO1xufVxuXG4vKipcbiAqIEVzdGFibGlzaGVzIGNvbm5lY3Rpb24gdG8gUmVkaXMgaWYgbm90IGFscmVhZHkgY29ubmVjdGVkLlxuICogU2V0cyB1cCBzaW5nbGV0b24gcGF0dGVybiBmb3IgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIHRvIHByZXZlbnQgY29ubmVjdGlvbiBsZWFrcy5cbiAqXG4gKiBAdGhyb3dzIHtFcnJvcn0gV2hlbiBSZWRpcyBjb25uZWN0aW9uIGZhaWxzXG4gKi9cbmV4cG9ydCBjb25zdCBjb25uZWN0UmVkaXMgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICghcmVkaXMuaXNPcGVuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHJlZGlzLmNvbm5lY3QoKTtcbiAgICB9IGNhdGNoIChlcnI6IHVua25vd24pIHtcbiAgICAgIGxvZ2dlci5lcnJvcihcbiAgICAgICAgeyBlcnI6IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBTdHJpbmcoZXJyKSwgdXJsOiBwcm9jZXNzLmVudi5SRURJU19VUkwgfSxcbiAgICAgICAgJ0ZhaWxlZCB0byBjb25uZWN0IHRvIFJlZGlzJyxcbiAgICAgICk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxvZ2dlci5kZWJ1ZygnUmVkaXMgY2xpZW50IGFscmVhZHkgY29ubmVjdGVkJyk7XG4gIH1cbn07XG4iXX0=