"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GatewayTimeoutError = exports.ServiceUnavailableError = exports.InternalServerError = exports.TooManyRequestsError = exports.NotFoundError = exports.ForbiddenError = exports.UnauthorizedError = exports.BadRequestError = exports.HttpError = void 0;
exports.logError = logError;
exports.normalizeError = normalizeError;
exports.createErrorResponse = createErrorResponse;
const logger_1 = require("./logger");
class HttpError extends Error {
    statusCode;
    constructor(message, statusCode = 500, options) {
        super(message, options);
        this.statusCode = statusCode;
        this.name = 'HttpError';
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.HttpError = HttpError;
class BadRequestError extends HttpError {
    constructor(message, options) {
        super(message, 400, options);
        this.name = 'BadRequestError';
    }
}
exports.BadRequestError = BadRequestError;
class UnauthorizedError extends HttpError {
    constructor(message, options) {
        super(message, 401, options);
        this.name = 'UnauthorizedError';
    }
}
exports.UnauthorizedError = UnauthorizedError;
class ForbiddenError extends HttpError {
    constructor(message, options) {
        super(message, 403, options);
        this.name = 'ForbiddenError';
    }
}
exports.ForbiddenError = ForbiddenError;
class NotFoundError extends HttpError {
    constructor(message, options) {
        super(message, 404, options);
        this.name = 'NotFoundError';
    }
}
exports.NotFoundError = NotFoundError;
class TooManyRequestsError extends HttpError {
    constructor(message, options) {
        super(message, 429, options);
        this.name = 'TooManyRequestsError';
    }
}
exports.TooManyRequestsError = TooManyRequestsError;
class InternalServerError extends HttpError {
    constructor(message, options) {
        super(message, 500, options);
        this.name = 'InternalServerError';
    }
}
exports.InternalServerError = InternalServerError;
class ServiceUnavailableError extends HttpError {
    constructor(message, options) {
        super(message, 503, options);
        this.name = 'ServiceUnavailableError';
    }
}
exports.ServiceUnavailableError = ServiceUnavailableError;
class GatewayTimeoutError extends HttpError {
    constructor(message, options) {
        super(message, 504, options);
        this.name = 'GatewayTimeoutError';
    }
}
exports.GatewayTimeoutError = GatewayTimeoutError;
function logError(error, context) {
    const httpError = normalizeError(error);
    const logData = {
        statusCode: httpError.statusCode,
        message: httpError.message,
        stack: httpError.stack,
        cause: httpError.cause
            ? httpError.cause instanceof Error
                ? { message: httpError.cause.message, stack: httpError.cause.stack }
                : String(httpError.cause)
            : undefined,
        ...context,
    };
    if (httpError.statusCode >= 500) {
        logger_1.logger.error(logData, 'System error');
    }
    else {
        logger_1.logger.warn(logData, 'Client error');
    }
    return httpError;
}
function normalizeError(error) {
    if (error instanceof HttpError) {
        return error;
    }
    if (error instanceof Error) {
        return new InternalServerError(error.message || 'Unknown error occurred', {
            cause: error,
        });
    }
    return new InternalServerError('An unknown error occurred');
}
function createErrorResponse(error) {
    return {
        error: {
            message: error.message,
            statusCode: error.statusCode,
        },
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,