"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrCreateUserAndConversation = getOrCreateUserAndConversation;
exports.numImagesInMessage = numImagesInMessage;
const client_1 = require("@prisma/client");
const prisma_1 = require("../lib/prisma");
const tasks_1 = require("../lib/tasks");
const logger_1 = require("./logger");
const CONVERSATION_TIMEOUT_MS = 30 * 60 * 1000;
async function handleStaleConversation(user, conversation) {
    logger_1.logger.debug({ userId: user.id, conversationId: conversation.id }, 'Stale conversation detected, closing and creating a new one.');
    const [, newConversation] = await prisma_1.prisma.$transaction([
        prisma_1.prisma.conversation.update({
            where: { id: conversation.id },
            data: { status: client_1.ConversationStatus.CLOSED },
        }),
        prisma_1.prisma.conversation.create({
            data: { userId: user.id },
        }),
    ]);
    (0, tasks_1.queueMemoryExtraction)(user.id, conversation.id);
    logger_1.logger.debug({ userId: user.id, conversationId: conversation.id }, 'Queued memory extraction for closed conversation.');
    return newConversation;
}
async function getOrCreateUserAndConversation(whatsappId, profileName) {
    const updateData = {};
    const user = await prisma_1.prisma.user.upsert({
        where: { whatsappId },
        update: updateData,
        create: {
            whatsappId,
            profileName,
        },
    });
    const lastOpenConversation = await prisma_1.prisma.conversation.findFirst({
        where: {
            userId: user.id,
            status: client_1.ConversationStatus.OPEN,
        },
        orderBy: { updatedAt: 'desc' },
    });
    if (lastOpenConversation) {
        const timeSinceLastUpdate = Date.now() - new Date(lastOpenConversation.updatedAt).getTime();
        if (timeSinceLastUpdate > CONVERSATION_TIMEOUT_MS) {
            return {
                user,
                conversation: await handleStaleConversation(user, lastOpenConversation),
            };
        }
        return { user, conversation: lastOpenConversation };
    }
    logger_1.logger.debug({ userId: user.id }, 'No open conversation found, creating a new one.');
    const newConversation = await prisma_1.prisma.conversation.create({
        data: { userId: user.id },
    });
    return { user, conversation: newConversation };
}
function numImagesInMessage(conversationHistoryWithImages) {
    if (!conversationHistoryWithImages || conversationHistoryWithImages.length === 0) {
        return 0;
    }
    const latestMessage = conversationHistoryWithImages.at(-1);
    if (!latestMessage || !latestMessage.content) {
        return 0;
    }
    if (!Array.isArray(latestMessage.content)) {
        return 0;
    }
    return latestMessage.content.filter((item) => item.type === 'image_url').length;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,