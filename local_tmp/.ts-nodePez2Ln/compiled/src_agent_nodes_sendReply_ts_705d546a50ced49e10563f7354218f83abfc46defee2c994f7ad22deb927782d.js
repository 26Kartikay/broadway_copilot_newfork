"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendReply = sendReply;
require("dotenv/config");
const client_1 = require("@prisma/client");
const prisma_1 = require("../../lib/prisma");
const redis_1 = require("../../lib/redis");
const tasks_1 = require("../../lib/tasks");
const twilio_1 = require("../../lib/twilio");
const errors_1 = require("../../utils/errors");
const logger_1 = require("../../utils/logger");
async function sendReply(state) {
    const { input, user, conversationId } = state;
    const messageId = input.MessageSid;
    const messageKey = `message:${messageId}`;
    const whatsappId = user.whatsappId;
    if (!conversationId) {
        throw new errors_1.InternalServerError('No open conversation found for user');
    }
    logger_1.logger.debug({ whatsappId }, 'Setting message status to sending in Redis');
    await redis_1.redis.hSet(messageKey, { status: 'sending' });
    const replies = state.assistantReply ?? [];
    const formattedContent = replies.flatMap((r) => {
        const parts = [];
        if (r.reply_text) {
            parts.push({ type: 'text', text: r.reply_text });
        }
        if (r.reply_type === 'image') {
            parts.push({ type: 'image_url', image_url: { url: r.media_url } });
        }
        return parts;
    });
    const pendingToPersist = state.pending ?? client_1.PendingType.NONE;
    const validTonalities = ['savage', 'friendly', 'hype_bff'];
    const selectedTonalityToPersist = state.selectedTonality && validTonalities.includes(state.selectedTonality)
        ? state.selectedTonality
        : null;
    let success = true;
    try {
        for (const [index, r] of replies.entries()) {
            if (r.reply_type === 'text') {
                await (0, twilio_1.sendText)(whatsappId, r.reply_text);
                logger_1.logger.debug({
                    whatsappId,
                    replyIndex: index + 1,
                    textLength: r.reply_text.length,
                }, 'Sent text message');
            }
            else if (r.reply_type === 'quick_reply') {
                if (r.buttons.length === 4) {
                    await (0, twilio_1.sendMenu)(whatsappId, r.reply_text, r.buttons);
                }
                else if (r.buttons.length === 3 || r.buttons.length === 2) {
                    await (0, twilio_1.sendMenu)(whatsappId, r.reply_text, r.buttons);
                }
                else {
                    logger_1.logger.warn({
                        whatsappId,
                        buttonCount: r.buttons.length,
                        replyIndex: index + 1,
                    }, 'Unexpected button count - falling back to text');
                    await (0, twilio_1.sendText)(whatsappId, r.reply_text);
                }
                logger_1.logger.debug({ whatsappId, replyIndex: index + 1, buttonCount: r.buttons.length }, 'Sent menu message');
            }
            else if (r.reply_type === 'image') {
                await (0, twilio_1.sendImage)(whatsappId, r.media_url, r.reply_text);
                logger_1.logger.debug({ whatsappId, replyIndex: index + 1, mediaUrl: r.media_url }, 'Sent image message');
            }
        }
        logger_1.logger.info({ whatsappId, replyCount: replies.length }, 'All replies sent successfully');
    }
    catch (err) {
        success = false;
        throw new errors_1.InternalServerError('Failed to send replies', { cause: err });
    }
    finally {
        logger_1.logger.debug({ status: success ? 'delivered' : 'failed' }, 'Updating message status in Redis');
        await redis_1.redis.hSet(messageKey, { status: success ? 'delivered' : 'failed' });
    }
    await prisma_1.prisma.message.create({
        data: {
            conversationId,
            role: client_1.MessageRole.AI,
            content: formattedContent,
            pending: pendingToPersist,
            selectedTonality: selectedTonalityToPersist,
        },
    });
    (0, tasks_1.queueFeedbackRequest)(user.id, conversationId);
    return { ...state };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,