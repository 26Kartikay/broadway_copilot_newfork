"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendText = sendText;
exports.sendMenu = sendMenu;
exports.sendImage = sendImage;
exports.validateTwilioRequest = validateTwilioRequest;
exports.processStatusCallback = processStatusCallback;
require("dotenv/config");
const twilio_1 = __importDefault(require("twilio"));
const RequestClient_1 = __importDefault(require("twilio/lib/base/RequestClient"));
const constants_1 = require("../utils/constants");
const errors_1 = require("../utils/errors");
const logger_1 = require("../utils/logger");
const redis_1 = require("./redis");
let subscriber;
async function getSubscriber() {
    if (!subscriber || !subscriber.isOpen) {
        const client = redis_1.redis.duplicate();
        await client.connect();
        subscriber = client;
    }
    if (!subscriber) {
        throw new errors_1.InternalServerError('Failed to initialize Redis subscriber');
    }
    return subscriber;
}
let cachedClient;
function getTwilioClient() {
    if (cachedClient)
        return cachedClient;
    const accountSid = process.env.TWILIO_ACCOUNT_SID;
    const authToken = process.env.TWILIO_AUTH_TOKEN;
    if (!accountSid || !authToken)
        throw new errors_1.InternalServerError('Twilio credentials missing');
    const httpClient = new RequestClient_1.default({
        keepAlive: true,
        timeout: Number(process.env.TWILIO_HTTP_TIMEOUT_MS || 10000),
    });
    const clientOptions = {
        httpClient,
        userAgentExtensions: ['broadway-copilot'],
    };
    clientOptions.edge = 'singapore';
    cachedClient = (0, twilio_1.default)(accountSid, authToken, clientOptions);
    return cachedClient;
}
async function sendText(to, body, imageUrl) {
    const client = getTwilioClient();
    const fromNumber = process.env.TWILIO_WHATSAPP_FROM || 'whatsapp:+14155238886';
    try {
        const messageOptions = {
            body,
            from: fromNumber,
            to: `whatsapp:+${to}`,
        };
        if (imageUrl) {
            messageOptions.mediaUrl = [imageUrl];
        }
        addStatusCallback(messageOptions);
        const resp = await client.messages.create(messageOptions);
        logger_1.logger.debug({ sid: resp.sid, to }, 'Sent text message');
        await awaitStatuses(resp.sid);
    }
    catch (err) {
        handleTwilioError(err);
    }
}
async function sendMenu(to, replyText, buttons) {
    const client = getTwilioClient();
    const fromNumber = process.env.TWILIO_WHATSAPP_FROM || 'whatsapp:+14155238886';
    if (buttons.length < 2 || buttons.length > 3) {
        logger_1.logger.warn(`Invalid button count ${buttons.length}; must be 2 or 3. Falling back to text`);
        await sendText(to, replyText);
        return;
    }
    const tonalityOptions = ['Hype BFF', 'Friendly', 'Savage'];
    const styleStudioOptions = ['Style for any occasion', 'Vacation looks', 'General styling'];
    const isTonality = buttons.length === 3 && buttons.every((b) => tonalityOptions.includes(b.text.trim()));
    const isStyleStudio = buttons.length >= 2 && buttons.some((b) => styleStudioOptions.includes(b.text.trim()));
    const contentSid = isTonality
        ? constants_1.TWILIO_QUICKREPLY_TONALITY_SID
        : isStyleStudio
            ? constants_1.TWILIO_QUICKREPLY_STYLING_SID
            : buttons.length === 2
                ? constants_1.TWILIO_QUICKREPLY2_SID
                : constants_1.TWILIO_QUICKREPLY3_SID;
    const templateLocales = {
        [constants_1.TWILIO_QUICKREPLY_TONALITY_SID]: 'en',
        [constants_1.TWILIO_QUICKREPLY2_SID]: 'en',
        [constants_1.TWILIO_QUICKREPLY3_SID]: 'en',
        [constants_1.TWILIO_QUICKREPLY_STYLING_SID]: 'en',
    };
    const localeCode = templateLocales[contentSid] || 'en';
    const contentVariables = {};
    const payload = {
        contentSid,
        contentVariables: JSON.stringify(contentVariables),
        from: fromNumber,
        to: `whatsapp:+${to}`,
        language: { code: localeCode },
    };
    addStatusCallback(payload);
    try {
        const resp = await client.messages.create(payload);
        logger_1.logger.debug({ sid: resp.sid, to, buttonCount: buttons.length }, 'Sent menu message');
        await awaitStatuses(resp.sid);
    }
    catch (err) {
        handleTwilioError(err);
    }
}
async function sendImage(to, imageUrl, caption) {
    await sendText(to, caption || '', imageUrl);
    logger_1.logger.debug({ to, imageUrl }, 'Sent image message');
}
async function awaitStatuses(sid) {
    const configuredToWait = process.env.TWILIO_WAIT_FOR_STATUS === 'true';
    if (!configuredToWait)
        return;
    logger_1.logger.debug({ sid }, 'Waiting for message status updates');
    const sentTimeoutMs = Number(process.env.TWILIO_SENT_TIMEOUT_MS || 5000);
    const deliveredTimeoutMs = Number(process.env.TWILIO_DELIVERED_TIMEOUT_MS || 15000);
    const channel = `twilio:status:${sid}`;
    const seenStatusesKey = `twilio:seen:${sid}`;
    const sub = await getSubscriber();
    let resolveSent;
    let resolveDelivered;
    const sentPromise = new Promise((resolve) => {
        resolveSent = resolve;
    });
    const deliveredPromise = new Promise((resolve) => {
        resolveDelivered = resolve;
    });
    const listener = (message) => {
        if (message === 'sent') {
            resolveSent();
        }
        else if (message === 'delivered' || message === 'failed' || message === 'undelivered') {
            resolveDelivered();
        }
    };
    await sub.subscribe(channel, listener);
    const preSeenStatuses = await redis_1.redis.sMembers(seenStatusesKey);
    if (preSeenStatuses.includes('sent')) {
        resolveSent();
    }
    if (preSeenStatuses.some((s) => ['delivered', 'failed', 'undelivered'].includes(s))) {
        resolveDelivered();
    }
    const sentTimer = setTimeout(() => {
        logger_1.logger.warn({ sid, timeout: sentTimeoutMs }, 'Timed out waiting for "sent" status');
        resolveSent();
    }, sentTimeoutMs);
    await sentPromise;
    clearTimeout(sentTimer);
    logger_1.logger.debug({ sid }, 'Received "sent" status');
    const deliveredTimer = setTimeout(() => {
        logger_1.logger.warn({ sid, timeout: deliveredTimeoutMs }, 'Timed out waiting for "delivered" status');
        resolveDelivered();
    }, deliveredTimeoutMs);
    await deliveredPromise;
    clearTimeout(deliveredTimer);
    logger_1.logger.debug({ sid }, 'Received "delivered" status');
    await sub.unsubscribe(channel);
    redis_1.redis.del(seenStatusesKey);
}
function addStatusCallback(options) {
    const serverUrl = process.env.SERVER_URL?.replace(/\/$/, '') || '';
    if (serverUrl) {
        options.statusCallback = `${serverUrl}/twilio/callback/`;
    }
}
function handleTwilioError(err) {
    if (err && err.code === 20003) {
        logger_1.logger.error('Twilio auth failed (401). Verify TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN.');
        throw new errors_1.UnauthorizedError('Twilio authentication failed');
    }
    if (err && err.code === 21211) {
        logger_1.logger.error('Invalid phone number format');
        throw new errors_1.BadRequestError('Invalid phone number format');
    }
    if (err && err.code === 21610) {
        logger_1.logger.error('Message blocked by carrier');
        throw new errors_1.ServiceUnavailableError('Message delivery blocked');
    }
    logger_1.logger.error({ err }, 'Twilio API error');
    throw new errors_1.ServiceUnavailableError('Message delivery failed');
}
function validateTwilioRequest(req) {
    try {
        const signature = req.header('X-Twilio-Signature') || req.header('x-twilio-signature');
        const protoHeader = req.headers['x-forwarded-proto'] || req.protocol;
        const hostHeader = req.headers['x-forwarded-host'] || req.get('host');
        const fullUrl = `${protoHeader}://${hostHeader}${req.originalUrl}`;
        const authToken = process.env.TWILIO_AUTH_TOKEN;
        if (process.env.TWILIO_VALIDATE_WEBHOOK === 'false')
            return true;
        if (!authToken) {
            logger_1.logger.warn('Twilio auth token not configured');
            return false;
        }
        if (!signature) {
            logger_1.logger.warn('Missing Twilio signature header');
            return false;
        }
        return twilio_1.default.validateRequest(authToken, signature, fullUrl, req.body);
    }
    catch (err) {
        logger_1.logger.error({ err: err instanceof Error ? err.message : String(err) }, 'Error validating Twilio request');
        return false;
    }
}
function processStatusCallback(payload) {
    if (!payload) {
        logger_1.logger.warn('Empty callback payload received');
        return;
    }
    const sid = payload?.MessageSid || payload?.SmsSid;
    const status = payload?.MessageStatus || payload?.SmsStatus;
    if (!sid || !status) {
        logger_1.logger.warn({ payload }, 'Invalid callback payload: missing sid or status');
        return;
    }
    const statusLower = status.toLowerCase();
    const channel = `twilio:status:${sid}`;
    const seenStatusesKey = `twilio:seen:${sid}`;
    redis_1.redis.publish(channel, statusLower);
    redis_1.redis.sAdd(seenStatusesKey, statusLower);
    redis_1.redis.expire(seenStatusesKey, 300);
    switch (statusLower) {
        case 'sent':
            logger_1.logger.debug({ sid }, 'Message sent successfully');
            break;
        case 'delivered':
            logger_1.logger.info({ sid }, 'Message delivered successfully');
            break;
        case 'failed':
        case 'undelivered':
            logger_1.logger.warn({ sid, status }, 'Message delivery failed');
            break;
        case 'queued':
        case 'sending':
            break;
        default:
            logger_1.logger.warn({ sid, status: statusLower }, 'Unknown message status received');
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,