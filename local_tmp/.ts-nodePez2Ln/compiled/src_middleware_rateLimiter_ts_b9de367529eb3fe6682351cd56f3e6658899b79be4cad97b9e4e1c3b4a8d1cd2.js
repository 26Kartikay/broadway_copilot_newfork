"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rateLimiter = void 0;
const redis_1 = require("../lib/redis");
const constants_1 = require("../utils/constants");
const errors_1 = require("../utils/errors");
const logger_1 = require("../utils/logger");
const rateLimiter = async (req, _res, next) => {
    const webhook = req.body;
    const whatsappId = webhook.WaId;
    const messageId = req.body.MessageSid;
    if (!whatsappId) {
        throw new errors_1.BadRequestError('Missing WhatsApp ID');
    }
    const key = `user:${whatsappId}`;
    try {
        if ((await redis_1.redis.exists(key)) === 0) {
            await redis_1.redis.hSet(key, {
                tokens: constants_1.USER_REQUEST_LIMIT,
                updatedAt: Date.now(),
                lastMessageAt: Date.now(),
            });
            await redis_1.redis.expire(key, constants_1.USER_STATE_TTL_SECONDS);
            logger_1.logger.debug({ whatsappId }, 'Rate limiter: initialized new user token bucket');
        }
        const updatedAtStr = await redis_1.redis.hGet(key, 'updatedAt');
        const updatedAt = parseInt(updatedAtStr ?? '0', 10);
        const timePassed = Date.now() - updatedAt;
        const refills = Math.floor(timePassed / constants_1.TOKEN_REFILL_PERIOD_MS);
        let tokenRemaining = parseInt((await redis_1.redis.hGet(key, 'tokens')) ?? '0', 10) + refills;
        tokenRemaining = Math.min(tokenRemaining, constants_1.USER_REQUEST_LIMIT);
        if (tokenRemaining <= 0) {
            logger_1.logger.warn({ whatsappId, messageId }, 'Rate limit exceeded');
            throw new errors_1.ServiceUnavailableError(`Rate limit exceeded for user ${whatsappId}`);
        }
        else {
            await redis_1.redis.hSet(key, {
                tokens: tokenRemaining - 1,
                updatedAt: Date.now(),
                lastMessageAt: Date.now(),
            });
            await redis_1.redis.expire(key, constants_1.USER_STATE_TTL_SECONDS);
            logger_1.logger.debug({ whatsappId, tokensRemaining: tokenRemaining - 1 }, 'Rate limiter: token consumed');
        }
        next();
    }
    catch (err) {
        if (err instanceof errors_1.HttpError) {
            throw err;
        }
        next();
    }
};
exports.rateLimiter = rateLimiter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Vzci9zcmMvYXBwL3NyYy9taWRkbGV3YXJlL3JhdGVMaW1pdGVyLnRzIiwic291cmNlcyI6WyIvdXNyL3NyYy9hcHAvc3JjL21pZGRsZXdhcmUvcmF0ZUxpbWl0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esd0NBQXFDO0FBRXJDLGtEQUk0QjtBQUM1Qiw0Q0FBc0Y7QUFDdEYsNENBQXlDO0FBV2xDLE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsSUFBYyxFQUFFLElBQWtCLEVBQUUsRUFBRTtJQUNwRixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBNEIsQ0FBQztJQUNqRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ2hDLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBRXRDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNoQixNQUFNLElBQUksd0JBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxNQUFNLEdBQUcsR0FBRyxRQUFRLFVBQVUsRUFBRSxDQUFDO0lBRWpDLElBQUksQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLGFBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNwQyxNQUFNLGFBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNwQixNQUFNLEVBQUUsOEJBQWtCO2dCQUMxQixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDckIsYUFBYSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7YUFDMUIsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxhQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxrQ0FBc0IsQ0FBQyxDQUFDO1lBQ2hELGVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxVQUFVLEVBQUUsRUFBRSxpREFBaUQsQ0FBQyxDQUFDO1FBQ2xGLENBQUM7UUFFRCxNQUFNLFlBQVksR0FBRyxNQUFNLGFBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxZQUFZLElBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUM7UUFDMUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsa0NBQXNCLENBQUMsQ0FBQztRQUVoRSxJQUFJLGNBQWMsR0FBRyxRQUFRLENBQUMsQ0FBQyxNQUFNLGFBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUN0RixjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsOEJBQWtCLENBQUMsQ0FBQztRQUU5RCxJQUFJLGNBQWMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUN4QixlQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxFQUFFLHFCQUFxQixDQUFDLENBQUM7WUFDOUQsTUFBTSxJQUFJLGdDQUF1QixDQUFDLGdDQUFnQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ2xGLENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSxhQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDcEIsTUFBTSxFQUFFLGNBQWMsR0FBRyxDQUFDO2dCQUMxQixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDckIsYUFBYSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7YUFDMUIsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxhQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxrQ0FBc0IsQ0FBQyxDQUFDO1lBQ2hELGVBQU0sQ0FBQyxLQUFLLENBQ1YsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGNBQWMsR0FBRyxDQUFDLEVBQUUsRUFDbkQsOEJBQThCLENBQy9CLENBQUM7UUFDSixDQUFDO1FBRUQsSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDO0lBQUMsT0FBTyxHQUFZLEVBQUUsQ0FBQztRQUN0QixJQUFJLEdBQUcsWUFBWSxrQkFBUyxFQUFFLENBQUM7WUFDN0IsTUFBTSxHQUFHLENBQUM7UUFDWixDQUFDO1FBRUQsSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBdERXLFFBQUEsV0FBVyxlQXNEdEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0RnVuY3Rpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyByZWRpcyB9IGZyb20gJy4uL2xpYi9yZWRpcyc7XG5pbXBvcnQgeyBUd2lsaW9XZWJob29rUmVxdWVzdCB9IGZyb20gJy4uL2xpYi90d2lsaW8vdHlwZXMnO1xuaW1wb3J0IHtcbiAgVE9LRU5fUkVGSUxMX1BFUklPRF9NUyxcbiAgVVNFUl9SRVFVRVNUX0xJTUlULFxuICBVU0VSX1NUQVRFX1RUTF9TRUNPTkRTLFxufSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgQmFkUmVxdWVzdEVycm9yLCBIdHRwRXJyb3IsIFNlcnZpY2VVbmF2YWlsYWJsZUVycm9yIH0gZnJvbSAnLi4vdXRpbHMvZXJyb3JzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XG4vKipcbiAqIEV4cHJlc3MgbWlkZGxld2FyZSBpbXBsZW1lbnRpbmcgdG9rZW4gYnVja2V0IHJhdGUgbGltaXRpbmcgZm9yIHVzZXIgcmVxdWVzdHMuXG4gKiBVc2VzIFJlZGlzIHRvIHRyYWNrIHRva2VuIGNvdW50cyB3aXRoIGF1dG9tYXRpYyByZWZpbGwgb3ZlciB0aW1lLlxuICogQWxsb3dzIHJlcXVlc3RzIHRvIHByb2NlZWQgb24gcmF0ZSBsaW1pdGVyIGVycm9ycyB0byBhdm9pZCBibG9ja2luZyB1c2Vycy5cbiAqXG4gKiBAcGFyYW0gcmVxIC0gRXhwcmVzcyByZXF1ZXN0IG9iamVjdCBjb250YWluaW5nIHVzZXIgSURcbiAqIEBwYXJhbSBfcmVzIC0gRXhwcmVzcyByZXNwb25zZSBvYmplY3QgKHVudXNlZClcbiAqIEBwYXJhbSBuZXh0IC0gRXhwcmVzcyBuZXh0IGZ1bmN0aW9uIHRvIGNvbnRpbnVlIHJlcXVlc3QgcHJvY2Vzc2luZ1xuICogQHRocm93cyB7SHR0cEVycm9yfSBXaGVuIHJhdGUgbGltaXQgaXMgZXhjZWVkZWQgKDUwMyBTZXJ2aWNlIFVuYXZhaWxhYmxlKVxuICovXG5leHBvcnQgY29uc3QgcmF0ZUxpbWl0ZXIgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCBfcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG4gIGNvbnN0IHdlYmhvb2sgPSByZXEuYm9keSBhcyBUd2lsaW9XZWJob29rUmVxdWVzdDtcbiAgY29uc3Qgd2hhdHNhcHBJZCA9IHdlYmhvb2suV2FJZDtcbiAgY29uc3QgbWVzc2FnZUlkID0gcmVxLmJvZHkuTWVzc2FnZVNpZDtcblxuICBpZiAoIXdoYXRzYXBwSWQpIHtcbiAgICB0aHJvdyBuZXcgQmFkUmVxdWVzdEVycm9yKCdNaXNzaW5nIFdoYXRzQXBwIElEJyk7XG4gIH1cblxuICBjb25zdCBrZXkgPSBgdXNlcjoke3doYXRzYXBwSWR9YDtcblxuICB0cnkge1xuICAgIGlmICgoYXdhaXQgcmVkaXMuZXhpc3RzKGtleSkpID09PSAwKSB7XG4gICAgICBhd2FpdCByZWRpcy5oU2V0KGtleSwge1xuICAgICAgICB0b2tlbnM6IFVTRVJfUkVRVUVTVF9MSU1JVCxcbiAgICAgICAgdXBkYXRlZEF0OiBEYXRlLm5vdygpLFxuICAgICAgICBsYXN0TWVzc2FnZUF0OiBEYXRlLm5vdygpLFxuICAgICAgfSk7XG4gICAgICBhd2FpdCByZWRpcy5leHBpcmUoa2V5LCBVU0VSX1NUQVRFX1RUTF9TRUNPTkRTKTtcbiAgICAgIGxvZ2dlci5kZWJ1Zyh7IHdoYXRzYXBwSWQgfSwgJ1JhdGUgbGltaXRlcjogaW5pdGlhbGl6ZWQgbmV3IHVzZXIgdG9rZW4gYnVja2V0Jyk7XG4gICAgfVxuXG4gICAgY29uc3QgdXBkYXRlZEF0U3RyID0gYXdhaXQgcmVkaXMuaEdldChrZXksICd1cGRhdGVkQXQnKTtcbiAgICBjb25zdCB1cGRhdGVkQXQgPSBwYXJzZUludCh1cGRhdGVkQXRTdHIgPz8gJzAnLCAxMCk7XG4gICAgY29uc3QgdGltZVBhc3NlZCA9IERhdGUubm93KCkgLSB1cGRhdGVkQXQ7XG4gICAgY29uc3QgcmVmaWxscyA9IE1hdGguZmxvb3IodGltZVBhc3NlZCAvIFRPS0VOX1JFRklMTF9QRVJJT0RfTVMpO1xuXG4gICAgbGV0IHRva2VuUmVtYWluaW5nID0gcGFyc2VJbnQoKGF3YWl0IHJlZGlzLmhHZXQoa2V5LCAndG9rZW5zJykpID8/ICcwJywgMTApICsgcmVmaWxscztcbiAgICB0b2tlblJlbWFpbmluZyA9IE1hdGgubWluKHRva2VuUmVtYWluaW5nLCBVU0VSX1JFUVVFU1RfTElNSVQpO1xuXG4gICAgaWYgKHRva2VuUmVtYWluaW5nIDw9IDApIHtcbiAgICAgIGxvZ2dlci53YXJuKHsgd2hhdHNhcHBJZCwgbWVzc2FnZUlkIH0sICdSYXRlIGxpbWl0IGV4Y2VlZGVkJyk7XG4gICAgICB0aHJvdyBuZXcgU2VydmljZVVuYXZhaWxhYmxlRXJyb3IoYFJhdGUgbGltaXQgZXhjZWVkZWQgZm9yIHVzZXIgJHt3aGF0c2FwcElkfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCByZWRpcy5oU2V0KGtleSwge1xuICAgICAgICB0b2tlbnM6IHRva2VuUmVtYWluaW5nIC0gMSxcbiAgICAgICAgdXBkYXRlZEF0OiBEYXRlLm5vdygpLFxuICAgICAgICBsYXN0TWVzc2FnZUF0OiBEYXRlLm5vdygpLFxuICAgICAgfSk7XG4gICAgICBhd2FpdCByZWRpcy5leHBpcmUoa2V5LCBVU0VSX1NUQVRFX1RUTF9TRUNPTkRTKTtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgeyB3aGF0c2FwcElkLCB0b2tlbnNSZW1haW5pbmc6IHRva2VuUmVtYWluaW5nIC0gMSB9LFxuICAgICAgICAnUmF0ZSBsaW1pdGVyOiB0b2tlbiBjb25zdW1lZCcsXG4gICAgICApO1xuICAgIH1cblxuICAgIG5leHQoKTtcbiAgfSBjYXRjaCAoZXJyOiB1bmtub3duKSB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIEh0dHBFcnJvcikge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICAvLyBBbGxvdyByZXF1ZXN0IHRvIHByb2NlZWQgb24gcmF0ZSBsaW1pdGVyIGVycm9yIHRvIGF2b2lkIGJsb2NraW5nIHVzZXJzXG4gICAgbmV4dCgpO1xuICB9XG59O1xuIl19