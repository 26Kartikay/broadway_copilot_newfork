"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tool = void 0;
exports.toOpenAIToolSpec = toOpenAIToolSpec;
const zod_1 = require("zod");
class Tool {
    name;
    description;
    schema;
    func;
    constructor(config) {
        this.name = config.name;
        this.description = config.description;
        this.schema = config.schema;
        this.func = config.func;
    }
}
exports.Tool = Tool;
function toOpenAIToolSpec(tool) {
    return {
        type: 'function',
        name: tool.name,
        description: tool.description,
        parameters: zod_1.z.toJSONSchema(tool.schema),
        strict: true,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Vzci9zcmMvYXBwL3NyYy9saWIvYWkvY29yZS90b29scy50cyIsInNvdXJjZXMiOlsiL3Vzci9zcmMvYXBwL3NyYy9saWIvYWkvY29yZS90b29scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFnSEEsNENBUUM7QUF2SEQsNkJBQTRDO0FBeUI1QyxNQUFhLElBQUk7SUFFZixJQUFJLENBQVM7SUFFYixXQUFXLENBQVM7SUFFcEIsTUFBTSxDQUFVO0lBRWhCLElBQUksQ0FBeUQ7SUFFN0QsWUFBWSxNQUtYO1FBQ0MsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUN0QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzFCLENBQUM7Q0FDRjtBQXJCRCxvQkFxQkM7QUFpRUQsU0FBZ0IsZ0JBQWdCLENBQUMsSUFBVTtJQUN6QyxPQUFPO1FBQ0wsSUFBSSxFQUFFLFVBQVU7UUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1FBQ2YsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1FBQzdCLFVBQVUsRUFBRSxPQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQTRCO1FBQ2xFLE1BQU0sRUFBRSxJQUFJO0tBQ2IsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEZ1bmN0aW9uVG9vbCBhcyBPcGVuQUlGdW5jdGlvblRvb2wgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL3Jlc3BvbnNlcy9yZXNwb25zZXMnO1xuaW1wb3J0IHsgeiwgWm9kT2JqZWN0LCBab2RUeXBlIH0gZnJvbSAnem9kJztcblxudHlwZSBUb29sU2NoZW1hID0gWm9kT2JqZWN0PFJlY29yZDxzdHJpbmcsIFpvZFR5cGU+PjtcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBzdHJ1Y3R1cmUgZm9yIGEgdG9vbCB0aGF0IHRoZSBtb2RlbCBjYW4gY2FsbC4gRWFjaCB0b29sIGhhcyBhXG4gKiBuYW1lLCBkZXNjcmlwdGlvbiwgYSBab2Qgc2NoZW1hIGZvciBpdHMgYXJndW1lbnRzLCBhbmQgYSBmdW5jdGlvbiB0byBleGVjdXRlLlxuICpcbiAqIEB0ZW1wbGF0ZSBUIFRoZSBzaGFwZSBvZiB0aGUgWm9kIHNjaGVtYSBmb3IgdGhlIHRvb2wncyBhcmd1bWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IHdlYXRoZXJUb29sOiBUb29sPHsgbG9jYXRpb246IHN0cmluZyB9PiA9IHtcbiAqICAgbmFtZTogJ2dldF93ZWF0aGVyJyxcbiAqICAgZGVzY3JpcHRpb246ICdHZXQgdGhlIGN1cnJlbnQgd2VhdGhlciBmb3IgYSBnaXZlbiBsb2NhdGlvbi4nLFxuICogICBzY2hlbWE6IHoub2JqZWN0KHtcbiAqICAgICBsb2NhdGlvbjogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIGNpdHkgdG8gZ2V0IHRoZSB3ZWF0aGVyIGZvci4nKSxcbiAqICAgfSksXG4gKiAgIGZ1bmM6IGFzeW5jICh7IGxvY2F0aW9uIH0pID0+IHtcbiAqICAgICAvLyBJbiBhIHJlYWwgYXBwbGljYXRpb24sIHRoaXMgd291bGQgY2FsbCBhIHdlYXRoZXIgQVBJLlxuICogICAgIHJldHVybiB7IHRlbXBlcmF0dXJlOiAyMiwgY29uZGl0aW9uOiAnc3VubnknIH07XG4gKiAgIH0sXG4gKiB9O1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBUb29sPFRTY2hlbWEgZXh0ZW5kcyBUb29sU2NoZW1hID0gVG9vbFNjaGVtYSwgVFJlc3VsdCA9IHVua25vd24+IHtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSB0b29sLiBNdXN0IGJlIHVuaXF1ZSBhbW9uZyBhbGwgdG9vbHMgcHJvdmlkZWQgdG8gdGhlIG1vZGVsLiAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKiBBIGRldGFpbGVkIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIHRvb2wgZG9lcywgdXNlZCBieSB0aGUgbW9kZWwgdG8gZGVjaWRlIHdoZW4gdG8gdXNlIGl0LiAqL1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAvKiogVGhlIFpvZCBzY2hlbWEgdGhhdCBkZWZpbmVzIHRoZSBhcmd1bWVudHMgdGhlIHRvb2wgYWNjZXB0cy4gKi9cbiAgc2NoZW1hOiBUU2NoZW1hO1xuICAvKiogVGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgdG9vbCBpcyBjYWxsZWQuIEl0IHJlY2VpdmVzIHRoZSBwYXJzZWQgYXJndW1lbnRzLiAqL1xuICBmdW5jOiAoYXJnczogei5pbmZlcjxUU2NoZW1hPikgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD47XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgc2NoZW1hOiBUU2NoZW1hO1xuICAgIGZ1bmM6IChhcmdzOiB6LmluZmVyPFRTY2hlbWE+KSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0PjtcbiAgfSkge1xuICAgIHRoaXMubmFtZSA9IGNvbmZpZy5uYW1lO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5zY2hlbWEgPSBjb25maWcuc2NoZW1hO1xuICAgIHRoaXMuZnVuYyA9IGNvbmZpZy5mdW5jO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHRvb2wgY2FsbCByZXF1ZXN0IGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IHRvb2xDYWxsOiBUb29sQ2FsbCA9IHtcbiAqICAgaWQ6ICdjYWxsX2FiYzEyMycsXG4gKiAgIG5hbWU6ICdnZXRfd2VhdGhlcicsXG4gKiAgIGFyZ3VtZW50czogeyBsb2NhdGlvbjogJ05ldyBZb3JrJyB9LFxuICogfTtcbiAqIGBgYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRvb2xDYWxsIHtcbiAgLyoqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgc3BlY2lmaWMgdG9vbCBjYWxsLiAqL1xuICBpZDogc3RyaW5nO1xuICAvKiogVGhlIG5hbWUgb2YgdGhlIHRvb2wgdGhlIG1vZGVsIHdhbnRzIHRvIGNhbGwuICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqIFRoZSBhcmd1bWVudHMgZm9yIHRoZSB0b29sLCBwYXJzZWQgYXMgYSBKU09OIG9iamVjdC4gKi9cbiAgYXJndW1lbnRzOiB1bmtub3duO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHJlc3VsdCBvZiBhIHNpbmdsZSB0b29sIGV4ZWN1dGlvbi4gVGhpcyBpcyB0eXBpY2FsbHkgY3JlYXRlZFxuICogYnkgdGhlIGFnZW50IGV4ZWN1dG9yIGFmdGVyIHJ1bm5pbmcgYSB0b29sLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCB0b29sUmVzdWx0OiBUb29sUmVzdWx0ID0ge1xuICogICBpZDogJ2NhbGxfYWJjMTIzJyxcbiAqICAgbmFtZTogJ2dldF93ZWF0aGVyJyxcbiAqICAgcmVzdWx0OiB7IHRlbXBlcmF0dXJlOiAyMiwgY29uZGl0aW9uOiAnc3VubnknIH0sXG4gKiB9O1xuICogYGBgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbFJlc3VsdCB7XG4gIC8qKiBUaGUgdW5pcXVlIElEIG9mIHRoZSB0b29sIGNhbGwgdGhpcyByZXN1bHQgY29ycmVzcG9uZHMgdG8uICovXG4gIGlkOiBzdHJpbmc7XG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgdG9vbCB0aGF0IHdhcyBleGVjdXRlZC4gKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKiogVGhlIG91dHB1dCBvZiB0aGUgdG9vbCBleGVjdXRpb24uICovXG4gIHJlc3VsdDogdW5rbm93bjtcbn1cblxuLyoqXG4gKiBBIHV0aWxpdHkgZnVuY3Rpb24gdGhhdCBjb252ZXJ0cyBhIGBUb29sYCBpbnRvIGEgc3BlY2lmaWNhdGlvbiB0aGF0IGlzXG4gKiBjb21wYXRpYmxlIHdpdGggdGhlIE9wZW5BSS9Hcm9xIEFQSSdzIGB0b29sc2AgcGFyYW1ldGVyLlxuICpcbiAqIEBwYXJhbSB0b29sIFRoZSB0b29sIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyBBbiBPcGVuQUktY29tcGF0aWJsZSBmdW5jdGlvbiB0b29sIHNwZWNpZmljYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IG9wZW5BSVNwZWMgPSB0b09wZW5BSVRvb2xTcGVjKHdlYXRoZXJUb29sKTtcbiAqIGNvbnNvbGUubG9nKG9wZW5BSVNwZWMpO1xuICogLy8ge1xuICogLy8gICB0eXBlOiAnZnVuY3Rpb24nLFxuICogLy8gICBuYW1lOiAnZ2V0X3dlYXRoZXInLFxuICogLy8gICBkZXNjcmlwdGlvbjogJ0dldCB0aGUgY3VycmVudCB3ZWF0aGVyIGZvciBhIGdpdmVuIGxvY2F0aW9uLicsXG4gKiAvLyAgIHBhcmFtZXRlcnM6IHsgLi4uWm9kIHNjaGVtYSBhcyBKU09OIHNjaGVtYS4uLiB9LFxuICogLy8gICBzdHJpY3Q6IHRydWVcbiAqIC8vIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9PcGVuQUlUb29sU3BlYyh0b29sOiBUb29sKTogT3BlbkFJRnVuY3Rpb25Ub29sIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICAgIG5hbWU6IHRvb2wubmFtZSxcbiAgICBkZXNjcmlwdGlvbjogdG9vbC5kZXNjcmlwdGlvbixcbiAgICBwYXJhbWV0ZXJzOiB6LnRvSlNPTlNjaGVtYSh0b29sLnNjaGVtYSkgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICAgc3RyaWN0OiB0cnVlLFxuICB9O1xufVxuIl19