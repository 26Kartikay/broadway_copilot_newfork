"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.agentExecutor = agentExecutor;
const messages_1 = require("../core/messages");
const MAX_ITERATIONS = 5;
async function getFinalStructuredOutput(runner, conversation, outputSchema, traceBuffer, nodeName) {
    const lastMessage = conversation[conversation.length - 1];
    if (lastMessage instanceof messages_1.AssistantMessage) {
        const customPrompt = new messages_1.SystemMessage('Parse the user message which contains the output from a previous step into a JSON object ' +
            'that strictly adheres to the provided schema. ' +
            'Do not add any extra commentary or change any of the values.');
        const textContent = lastMessage.content
            .filter((p) => p.type === 'text')
            .map((p) => p.text)
            .join('');
        const parsingConversation = [new messages_1.UserMessage(textContent)];
        const structuredRunner = runner.withStructuredOutput(outputSchema);
        return await structuredRunner.run(customPrompt, parsingConversation, traceBuffer, nodeName);
    }
    else {
        throw new Error('Last message is not an assistant message');
    }
}
async function agentExecutor(runner, systemPrompt, history, options, traceBuffer, maxLoops = MAX_ITERATIONS) {
    const runnerWithTools = runner.bind(options.tools);
    const conversation = [...history];
    const seenToolCallIds = new Set();
    for (let i = 0; i < maxLoops; i++) {
        const { assistant, toolCalls } = await runnerWithTools.run(systemPrompt, conversation, traceBuffer, options.nodeName);
        conversation.push(assistant);
        if (toolCalls.length === 0) {
            break;
        }
        const toolResults = await Promise.all(toolCalls
            .filter((toolCall) => !seenToolCallIds.has(toolCall.id))
            .map(async (toolCall) => {
            seenToolCallIds.add(toolCall.id);
            const toolDef = options.tools.find((t) => t.name === toolCall.name);
            if (!toolDef) {
                return {
                    id: toolCall.id,
                    name: toolCall.name,
                    result: `Tool '${toolCall.name}' not found.`,
                    isError: true,
                };
            }
            try {
                const parsedArgs = toolDef.schema.parse(toolCall.arguments);
                const result = await Promise.resolve(toolDef.func(parsedArgs));
                return {
                    id: toolCall.id,
                    name: toolDef.name,
                    result,
                    isError: false,
                };
            }
            catch (error) {
                return {
                    id: toolCall.id,
                    name: toolCall.name,
                    result: `Error executing tool '${toolCall.name}': ${error instanceof Error ? error.message : String(error)}`,
                    isError: true,
                };
            }
        }));
        if (toolResults.length === 0) {
            break;
        }
        toolResults.forEach((toolResult) => {
            conversation.push(new messages_1.ToolMessage(JSON.stringify(toolResult.result, null, 2), toolResult.id, toolResult.name, toolResult.isError));
        });
    }
    return await getFinalStructuredOutput(runner, conversation, options.outputSchema, traceBuffer, options.nodeName);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,