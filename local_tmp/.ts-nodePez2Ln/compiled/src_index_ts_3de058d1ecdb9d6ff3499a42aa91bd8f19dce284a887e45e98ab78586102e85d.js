"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv/config");
require("./scheduler/dailyPromptScheduler");
const cors_1 = __importDefault(require("cors"));
const express_1 = __importDefault(require("express"));
const agent_1 = require("./agent");
const prisma_1 = require("./lib/prisma");
const redis_1 = require("./lib/redis");
const twilio_1 = require("./lib/twilio");
const auth_1 = require("./middleware/auth");
const errors_1 = require("./middleware/errors");
const rateLimiter_1 = require("./middleware/rateLimiter");
const whitelist_1 = require("./middleware/whitelist");
const constants_1 = require("./utils/constants");
const logger_1 = require("./utils/logger");
const paths_1 = require("./utils/paths");
const app = (0, express_1.default)();
app.set('trust proxy', true);
app.use((0, cors_1.default)({
    origin: [/http:\/\/localhost:\d+/, /http:\/\/127\.0\.0\.1:\d+/],
    credentials: true,
}));
app.use(express_1.default.urlencoded({ extended: false }));
app.use(express_1.default.json());
app.use('/uploads', express_1.default.static((0, paths_1.staticUploadsMount)()));
const getMessageKey = (id) => `message:${id}`;
const getUserActiveKey = (id) => `user_active:${id}`;
const getUserQueueKey = (id) => `user_queue:${id}`;
const getUserAbortChannel = (id) => `user_abort:${id}`;
app.post('/twilio/', auth_1.authenticateRequest, whitelist_1.whitelist, rateLimiter_1.rateLimiter, async (req, res, next) => {
    try {
        const webhookPayload = req.body;
        const { WaId: userId, MessageSid: messageId } = webhookPayload;
        if (!userId) {
            logger_1.logger.error({ payload: webhookPayload }, 'WaId is missing from Twilio webhook payload');
            return res.status(400).send('Error: WaId not found');
        }
        logger_1.logger.info({ userId, messageId }, 'Received incoming message');
        const mk = getMessageKey(messageId);
        if ((await redis_1.redis.exists(mk)) === 1) {
            logger_1.logger.debug({ messageId }, 'Message already processed, skipping');
            return res.status(200).end();
        }
        await redis_1.redis.hSet(mk, {
            userId,
            status: 'queued',
            createdAt: Date.now(),
        });
        await redis_1.redis.expire(mk, constants_1.MESSAGE_TTL_SECONDS);
        const uak = getUserActiveKey(userId);
        const currentActive = await redis_1.redis.get(uak);
        const currentStatus = currentActive
            ? await redis_1.redis.hGet(getMessageKey(currentActive), 'status')
            : null;
        if (currentActive && currentStatus === 'running') {
            await redis_1.redis.publish(getUserAbortChannel(userId), currentActive);
            logger_1.logger.info({ userId, abortedMessageId: currentActive }, 'Published abort signal for previous message processing');
        }
        if (currentStatus === 'sending') {
            const uqk = getUserQueueKey(userId);
            await redis_1.redis.rPush(uqk, JSON.stringify({ messageId, input: webhookPayload }));
            await redis_1.redis.expire(uqk, constants_1.USER_STATE_TTL_SECONDS);
            logger_1.logger.debug({ messageId, userId }, 'Queued message due to active sending');
            return res.status(200).end();
        }
        else {
            await redis_1.redis.set(uak, messageId, { EX: constants_1.USER_STATE_TTL_SECONDS });
            processMessage(userId, messageId, webhookPayload);
            return res.status(200).end();
        }
    }
    catch (err) {
        const messageId = req.body?.MessageSid;
        try {
            if (messageId) {
                const mk = getMessageKey(messageId);
                await redis_1.redis.hSet(mk, { status: 'failed' });
            }
        }
        catch (redisErr) {
            logger_1.logger.warn({
                messageId,
                err: redisErr instanceof Error ? redisErr.message : String(redisErr),
            }, 'Failed to set failed status for message');
        }
        return next(err);
    }
});
app.post('/twilio/callback/', auth_1.authenticateRequest, async (req, res, next) => {
    try {
        (0, twilio_1.processStatusCallback)(req.body || {});
        return res.status(200).end();
    }
    catch (err) {
        return next(err);
    }
});
app.use(errors_1.errorHandler);
async function processMessage(userId, messageId, input) {
    const mk = getMessageKey(messageId);
    try {
        await redis_1.redis.hSet(mk, { status: 'running' });
        await (0, agent_1.runAgent)(userId, messageId, input);
    }
    catch (err) {
        if (err instanceof Error && err.name === 'AbortError') {
            logger_1.logger.info({ userId, messageId }, 'Message processing aborted');
        }
        try {
            await redis_1.redis.hSet(mk, { status: 'failed' });
        }
        catch (redisErr) {
            logger_1.logger.error({
                redisErr: redisErr instanceof Error ? redisErr.message : String(redisErr),
                userId,
                messageId,
            }, 'Failed to update message status in Redis');
        }
    }
    finally {
        const uak = getUserActiveKey(userId);
        const activeMessageId = await redis_1.redis.get(uak);
        if (activeMessageId === messageId) {
            try {
                const uqk = getUserQueueKey(userId);
                const nextStr = await redis_1.redis.lPop(uqk);
                if (nextStr) {
                    const next = JSON.parse(nextStr);
                    await redis_1.redis.set(uak, next.messageId, {
                        EX: constants_1.USER_STATE_TTL_SECONDS,
                    });
                    processMessage(userId, next.messageId, next.input);
                }
                else {
                    await redis_1.redis.del(uak);
                }
            }
            catch (queueErr) {
                logger_1.logger.error({
                    userId,
                    messageId,
                    err: queueErr instanceof Error ? queueErr.message : String(queueErr),
                }, 'Failed to process message queue');
            }
        }
    }
}
void (async function bootstrap() {
    try {
        await (0, redis_1.connectRedis)();
        await (0, prisma_1.connectPrisma)();
        (0, agent_1.initializeAgent)();
        const PORT = Number(process.env.PORT || 8080);
        app.listen(PORT, '0.0.0.0', () => {
            logger_1.logger.info({ port: PORT }, 'Broadway WhatsApp Bot server started');
        });
    }
    catch (err) {
        logger_1.logger.error({
            err: err instanceof Error ? err.message : String(err),
            stack: err instanceof Error ? err.stack : undefined,
        }, 'Server bootstrap failed');
        process.exit(1);
    }
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,