"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseChatModel = void 0;
require("dotenv/config");
const structured_output_runnable_1 = require("./structured_output_runnable");
class BaseChatModel {
    params;
    boundTools = [];
    structuredOutputSchema = null;
    structuredOutputToolName = 'structured_output';
    constructor(params) {
        this.params = {
            ...params,
        };
    }
    bind(tools) {
        const newInstance = new this.constructor(this.params);
        newInstance.boundTools = [...tools];
        return newInstance;
    }
    withStructuredOutput(schema) {
        const newInstance = this._clone();
        newInstance.structuredOutputSchema = schema;
        return new structured_output_runnable_1.StructuredOutputRunnable(newInstance, schema);
    }
    _clone() {
        const newInstance = new this.constructor(this.params);
        if (this.boundTools.length > 0) {
            newInstance.boundTools = [...this.boundTools];
        }
        if (this.structuredOutputSchema) {
            newInstance.structuredOutputSchema = this.structuredOutputSchema;
        }
        return newInstance;
    }
}
exports.BaseChatModel = BaseChatModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Vzci9zcmMvYXBwL3NyYy9saWIvYWkvY29yZS9iYXNlX2NoYXRfbW9kZWwudHMiLCJzb3VyY2VzIjpbIi91c3Ivc3JjL2FwcC9zcmMvbGliL2FpL2NvcmUvYmFzZV9jaGF0X21vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlCQUF1QjtBQVF2Qiw2RUFBd0U7QUFReEUsTUFBc0IsYUFBYTtJQUUxQixNQUFNLENBQWtCO0lBQ3JCLFVBQVUsR0FBVyxFQUFFLENBQUM7SUFDeEIsc0JBQXNCLEdBQW1CLElBQUksQ0FBQztJQUNqRCx3QkFBd0IsR0FBVyxtQkFBbUIsQ0FBQztJQUU5RCxZQUFZLE1BQXVCO1FBQ2pDLElBQUksQ0FBQyxNQUFNLEdBQUc7WUFDWixHQUFHLE1BQU07U0FDVixDQUFDO0lBQ0osQ0FBQztJQVVELElBQUksQ0FBQyxLQUFhO1FBQ2hCLE1BQU0sV0FBVyxHQUFHLElBQUssSUFBSSxDQUFDLFdBQXFELENBQ2pGLElBQUksQ0FBQyxNQUFNLENBQ1osQ0FBQztRQUNGLFdBQVcsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFRRCxvQkFBb0IsQ0FBb0IsTUFBUztRQUMvQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEMsV0FBVyxDQUFDLHNCQUFzQixHQUFHLE1BQU0sQ0FBQztRQUM1QyxPQUFPLElBQUkscURBQXdCLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFvQlMsTUFBTTtRQUNkLE1BQU0sV0FBVyxHQUFHLElBQUssSUFBSSxDQUFDLFdBQXFELENBQ2pGLElBQUksQ0FBQyxNQUFNLENBQ1osQ0FBQztRQUNGLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDL0IsV0FBVyxDQUFDLFVBQVUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hELENBQUM7UUFDRCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBQ2hDLFdBQVcsQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUM7UUFDbkUsQ0FBQztRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FDRjtBQXZFRCxzQ0F1RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2RvdGVudi9jb25maWcnO1xuXG5pbXBvcnQgR3JvcSBmcm9tICdncm9xLXNkayc7XG5pbXBvcnQgT3BlbkFJIGZyb20gJ29wZW5haSc7XG5pbXBvcnQgeyBab2RUeXBlIH0gZnJvbSAnem9kJztcbmltcG9ydCB7IFRyYWNlQnVmZmVyIH0gZnJvbSAnLi4vLi4vLi4vYWdlbnQvdHJhY2luZyc7XG5pbXBvcnQgeyBCYXNlTWVzc2FnZSwgU3lzdGVtTWVzc2FnZSB9IGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0IHsgQ2hhdE1vZGVsUGFyYW1zLCBNb2RlbFJ1bm5lciwgUnVuT3V0Y29tZSB9IGZyb20gJy4vcnVubmFibGVzJztcbmltcG9ydCB7IFN0cnVjdHVyZWRPdXRwdXRSdW5uYWJsZSB9IGZyb20gJy4vc3RydWN0dXJlZF9vdXRwdXRfcnVubmFibGUnO1xuaW1wb3J0IHR5cGUgeyBUb29sIH0gZnJvbSAnLi90b29scyc7XG5cbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgY2hhdCBtb2RlbHMsIHByb3ZpZGluZyBhIGNvbW1vbiBpbnRlcmZhY2UgZm9yXG4gKiBpbnRlcmFjdGluZyB3aXRoIGRpZmZlcmVudCBMTE0gcHJvdmlkZXJzLiBJdCBoYW5kbGVzIHRvb2wgYmluZGluZyxcbiAqIHN0cnVjdHVyZWQgb3V0cHV0LCBhbmQgdGhlIGNvcmUgbG9naWMgb2YgcnVubmluZyBhIG1vZGVsLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUNoYXRNb2RlbCBpbXBsZW1lbnRzIE1vZGVsUnVubmVyIHtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNsaWVudDogT3BlbkFJIHwgR3JvcTtcbiAgcHVibGljIHBhcmFtczogQ2hhdE1vZGVsUGFyYW1zO1xuICBwcm90ZWN0ZWQgYm91bmRUb29sczogVG9vbFtdID0gW107XG4gIHByb3RlY3RlZCBzdHJ1Y3R1cmVkT3V0cHV0U2NoZW1hOiBab2RUeXBlIHwgbnVsbCA9IG51bGw7XG4gIHB1YmxpYyBzdHJ1Y3R1cmVkT3V0cHV0VG9vbE5hbWU6IHN0cmluZyA9ICdzdHJ1Y3R1cmVkX291dHB1dCc7XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBDaGF0TW9kZWxQYXJhbXMpIHtcbiAgICB0aGlzLnBhcmFtcyA9IHtcbiAgICAgIC4uLnBhcmFtcyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIHRvb2xzIHRvIHRoZSBtb2RlbCBpbnN0YW5jZS4gV2hlbiB0aGUgbW9kZWwgaXMgcnVuLCBpdCBjYW4gdGhlblxuICAgKiBjaG9vc2UgdG8gY2FsbCBhbnkgb2YgdGhlIGJvdW5kIHRvb2xzLiBUaGlzIHJldHVybnMgYSBuZXcgYEJhc2VDaGF0TW9kZWxgXG4gICAqIGluc3RhbmNlIHdpdGggdGhlIHRvb2xzIGJvdW5kLlxuICAgKlxuICAgKiBAcGFyYW0gdG9vbHMgQW4gYXJyYXkgb2YgdG9vbHMgdG8gYmluZCB0byB0aGUgbW9kZWwuXG4gICAqIEByZXR1cm5zIEEgbmV3IGBCYXNlQ2hhdE1vZGVsYCBpbnN0YW5jZSB3aXRoIHRoZSB0b29scyBib3VuZC5cbiAgICovXG4gIGJpbmQodG9vbHM6IFRvb2xbXSk6IHRoaXMge1xuICAgIGNvbnN0IG5ld0luc3RhbmNlID0gbmV3ICh0aGlzLmNvbnN0cnVjdG9yIGFzIG5ldyAocGFyYW1zOiBDaGF0TW9kZWxQYXJhbXMpID0+IHRoaXMpKFxuICAgICAgdGhpcy5wYXJhbXMsXG4gICAgKTtcbiAgICBuZXdJbnN0YW5jZS5ib3VuZFRvb2xzID0gWy4uLnRvb2xzXTtcbiAgICByZXR1cm4gbmV3SW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogQ2hhaW5zIHRoZSBtb2RlbCB3aXRoIGEgWm9kIHNjaGVtYSB0byBwcm9kdWNlIHN0cnVjdHVyZWQsIHZhbGlkYXRlZCBvdXRwdXQuXG4gICAqXG4gICAqIEBwYXJhbSBzY2hlbWEgVGhlIFpvZCBzY2hlbWEgZm9yIHRoZSBkZXNpcmVkIG91dHB1dCBmb3JtYXQuXG4gICAqIEByZXR1cm5zIEEgYFN0cnVjdHVyZWRPdXRwdXRSdW5uYWJsZWAgaW5zdGFuY2UgdGhhdCB3aWxsIHJldHVybiBhIHR5cGVkIG9iamVjdC5cbiAgICovXG4gIHdpdGhTdHJ1Y3R1cmVkT3V0cHV0PFQgZXh0ZW5kcyBab2RUeXBlPihzY2hlbWE6IFQpOiBTdHJ1Y3R1cmVkT3V0cHV0UnVubmFibGU8VD4ge1xuICAgIGNvbnN0IG5ld0luc3RhbmNlID0gdGhpcy5fY2xvbmUoKTtcbiAgICBuZXdJbnN0YW5jZS5zdHJ1Y3R1cmVkT3V0cHV0U2NoZW1hID0gc2NoZW1hO1xuICAgIHJldHVybiBuZXcgU3RydWN0dXJlZE91dHB1dFJ1bm5hYmxlKG5ld0luc3RhbmNlLCBzY2hlbWEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgdGhlIG1vZGVsIHdpdGggYSBnaXZlbiBjb252ZXJzYXRpb24gaGlzdG9yeSBhbmQgcmV0dXJucyB0aGUgb3V0Y29tZS5cbiAgICogVGhpcyBtZXRob2QgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzc2VzLlxuICAgKlxuICAgKiBAcGFyYW0gc3lzdGVtUHJvbXB0IFRoZSBzeXN0ZW0gcHJvbXB0IHRvIGd1aWRlIHRoZSBtb2RlbCdzIGJlaGF2aW9yLlxuICAgKiBAcGFyYW0gbXNncyBUaGUgYXJyYXkgb2YgbWVzc2FnZXMgcmVwcmVzZW50aW5nIHRoZSBjb252ZXJzYXRpb24gaGlzdG9yeS5cbiAgICogQHBhcmFtIGdyYXBoUnVuSWQgVGhlIElEIG9mIHRoZSBjdXJyZW50IGdyYXBoIHJ1biBmb3IgdHJhY2luZyBwdXJwb3Nlcy5cbiAgICogQHBhcmFtIG5vZGVOYW1lIFRoZSBuYW1lIG9mIHRoZSBncmFwaCBub2RlIG1ha2luZyB0aGlzIGNhbGwuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBvdXRjb21lIG9mIHRoZSBtb2RlbCBydW4sIGluY2x1ZGluZ1xuICAgKiB0aGUgYXNzaXN0YW50J3MgcmVwbHkgYW5kIGFueSB0b29sIGNhbGxzLlxuICAgKi9cbiAgYWJzdHJhY3QgcnVuKFxuICAgIHN5c3RlbVByb21wdDogU3lzdGVtTWVzc2FnZSxcbiAgICBtc2dzOiBCYXNlTWVzc2FnZVtdLFxuICAgIHRyYWNlQnVmZmVyOiBUcmFjZUJ1ZmZlcixcbiAgICBub2RlTmFtZTogc3RyaW5nLFxuICApOiBQcm9taXNlPFJ1bk91dGNvbWU+O1xuXG4gIHByb3RlY3RlZCBfY2xvbmUoKTogdGhpcyB7XG4gICAgY29uc3QgbmV3SW5zdGFuY2UgPSBuZXcgKHRoaXMuY29uc3RydWN0b3IgYXMgbmV3IChwYXJhbXM6IENoYXRNb2RlbFBhcmFtcykgPT4gdGhpcykoXG4gICAgICB0aGlzLnBhcmFtcyxcbiAgICApO1xuICAgIGlmICh0aGlzLmJvdW5kVG9vbHMubGVuZ3RoID4gMCkge1xuICAgICAgbmV3SW5zdGFuY2UuYm91bmRUb29scyA9IFsuLi50aGlzLmJvdW5kVG9vbHNdO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJ1Y3R1cmVkT3V0cHV0U2NoZW1hKSB7XG4gICAgICBuZXdJbnN0YW5jZS5zdHJ1Y3R1cmVkT3V0cHV0U2NoZW1hID0gdGhpcy5zdHJ1Y3R1cmVkT3V0cHV0U2NoZW1hO1xuICAgIH1cbiAgICByZXR1cm4gbmV3SW5zdGFuY2U7XG4gIH1cbn1cbiJdfQ==