"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateGraph = exports.END = exports.START = void 0;
const cuid2_1 = require("@paralleldrive/cuid2");
exports.START = 'START';
exports.END = 'END';
class StateGraph {
    nodes = new Map();
    edges = new Map();
    startNode = '';
    addNode(name, node) {
        if (this.nodes.has(name)) {
            throw new Error(`Node "${name}" is already defined.`);
        }
        this.nodes.set(name, node);
        return this;
    }
    addEdge(source, target) {
        if (source === exports.START) {
            if (this.startNode) {
                throw new Error('Start node is already defined.');
            }
            this.startNode = target;
            return this;
        }
        if (this.edges.has(source)) {
            throw new Error(`An edge from "${source}" is already defined.`);
        }
        this.edges.set(source, { source, target });
        return this;
    }
    addConditionalEdges(source, resolver, targets) {
        if (this.edges.has(source)) {
            throw new Error(`An edge from "${source}" is already defined.`);
        }
        this.edges.set(source, { source, resolver, targets });
        return this;
    }
    compile() {
        if (!this.startNode) {
            throw new Error('Graph must have a starting point defined with `addEdge(START, ...)`.');
        }
        return {
            invoke: async (initialState, config = {}) => {
                let currentNodeName = this.startNode;
                let currentState = { ...initialState };
                const { signal, runId: graphRunId } = config;
                while (currentNodeName !== exports.END) {
                    if (signal?.aborted) {
                        const error = new Error('Graph execution aborted');
                        error.name = 'AbortError';
                        throw error;
                    }
                    const currentNode = this.nodes.get(currentNodeName);
                    if (!currentNode) {
                        throw new Error(`Node "${currentNodeName}" not found.`);
                    }
                    const startTime = new Date();
                    const nodeRunId = (0, cuid2_1.createId)();
                    const traceCandidate = currentState.traceBuffer;
                    const traceBuffer = graphRunId && traceCandidate ? traceCandidate : null;
                    let nodeRunEntry = null;
                    if (traceBuffer) {
                        nodeRunEntry = {
                            id: nodeRunId,
                            nodeName: currentNodeName,
                            startTime,
                            createdAt: startTime,
                            updatedAt: startTime,
                        };
                        traceBuffer.nodeRuns.push(nodeRunEntry);
                    }
                    let stateUpdate;
                    try {
                        stateUpdate = await currentNode(currentState);
                    }
                    catch (e) {
                        throw e;
                    }
                    if (nodeRunEntry) {
                        const endTime = new Date();
                        nodeRunEntry.endTime = endTime;
                        nodeRunEntry.durationMs = endTime.getTime() - startTime.getTime();
                        nodeRunEntry.updatedAt = endTime;
                    }
                    if (stateUpdate !== undefined) {
                        currentState = { ...currentState, ...stateUpdate };
                    }
                    const edge = this.edges.get(currentNodeName);
                    if (!edge) {
                        throw new Error(`No edge found from node "${currentNodeName}". All nodes must have an outgoing edge.`);
                    }
                    if ('target' in edge) {
                        currentNodeName = edge.target;
                    }
                    else {
                        const targetKey = edge.resolver(currentState);
                        const nextNode = edge.targets[targetKey];
                        if (!nextNode) {
                            throw new Error(`Conditional edge from "${currentNodeName}" resolved to "${targetKey}", which is not a valid target.`);
                        }
                        currentNodeName = nextNode;
                    }
                }
                return currentState;
            },
        };
    }
}
exports.StateGraph = StateGraph;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,