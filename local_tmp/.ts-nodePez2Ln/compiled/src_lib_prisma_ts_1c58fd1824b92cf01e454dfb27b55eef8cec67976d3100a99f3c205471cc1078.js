"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prisma = void 0;
exports.connectPrisma = connectPrisma;
const client_1 = require("@prisma/client");
const logger_1 = require("../utils/logger");
const globalForPrisma = globalThis;
exports.prisma = globalForPrisma.prisma ??
    new client_1.PrismaClient({
        log: [
            { emit: 'event', level: 'error' },
            { emit: 'event', level: 'warn' },
        ],
    });
if (process.env.NODE_ENV !== 'production') {
    globalForPrisma.prisma = exports.prisma;
}
const registerLogHandler = exports.prisma.$on.bind(exports.prisma);
registerLogHandler('error', (e) => {
    logger_1.logger.error({ target: e.target, message: e.message }, 'Database error');
});
registerLogHandler('warn', (e) => {
    logger_1.logger.warn({ message: e.message }, 'Database warning');
});
async function connectPrisma() {
    try {
        await exports.prisma.$connect();
        logger_1.logger.info('Successfully connected to the database');
    }
    catch (err) {
        logger_1.logger.error({
            err: err instanceof Error ? err.message : 'Unknown error',
            stack: err instanceof Error ? err.stack : undefined,
        }, 'Failed to connect to the database');
        throw err;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Vzci9zcmMvYXBwL3NyYy9saWIvcHJpc21hLnRzIiwic291cmNlcyI6WyIvdXNyL3NyYy9hcHAvc3JjL2xpYi9wcmlzbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBNkNBLHNDQWNDO0FBM0RELDJDQUFzRDtBQUV0RCw0Q0FBeUM7QUFNekMsTUFBTSxlQUFlLEdBQUcsVUFBMkQsQ0FBQztBQU12RSxRQUFBLE1BQU0sR0FDakIsZUFBZSxDQUFDLE1BQU07SUFDdEIsSUFBSSxxQkFBWSxDQUFDO1FBQ2YsR0FBRyxFQUFFO1lBQ0gsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7WUFDakMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7U0FDakM7S0FDRixDQUFDLENBQUM7QUFFTCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLFlBQVksRUFBRSxDQUFDO0lBQzFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsY0FBTSxDQUFDO0FBQ2xDLENBQUM7QUFFRCxNQUFNLGtCQUFrQixHQUFHLGNBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQU0sQ0FHaEMsQ0FBQztBQUVsQixrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFrQixFQUFFLEVBQUU7SUFDakQsZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUMzRSxDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFrQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQWtCLEVBQUUsRUFBRTtJQUNoRCxlQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0FBQzFELENBQUMsQ0FBQyxDQUFDO0FBT0ksS0FBSyxVQUFVLGFBQWE7SUFDakMsSUFBSSxDQUFDO1FBQ0gsTUFBTSxjQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDeEIsZUFBTSxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFBQyxPQUFPLEdBQVksRUFBRSxDQUFDO1FBQ3RCLGVBQU0sQ0FBQyxLQUFLLENBQ1Y7WUFDRSxHQUFHLEVBQUUsR0FBRyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBZTtZQUN6RCxLQUFLLEVBQUUsR0FBRyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUztTQUNwRCxFQUNELG1DQUFtQyxDQUNwQyxDQUFDO1FBQ0YsTUFBTSxHQUFHLENBQUM7SUFDWixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYSwgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi91dGlscy9sb2dnZXInO1xuXG4vKipcbiAqIEdsb2JhbCBQcmlzbWEgY2xpZW50IGluc3RhbmNlIGZvciBkYXRhYmFzZSBvcGVyYXRpb25zLlxuICogVXNlcyBzaW5nbGV0b24gcGF0dGVybiB0byBwcmV2ZW50IGNvbm5lY3Rpb24gbGVha3MgaW4gZGV2ZWxvcG1lbnQuXG4gKi9cbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdHlwZW9mIGdsb2JhbFRoaXMgJiB7IHByaXNtYT86IFByaXNtYUNsaWVudCB9O1xuXG4vKipcbiAqIFByaXNtYSBkYXRhYmFzZSBjbGllbnQgY29uZmlndXJlZCB3aXRoIGVycm9yIGFuZCB3YXJuaW5nIGV2ZW50IGxvZ2dpbmcuXG4gKiBTaW5nbGV0b24gcGF0dGVybiBwcmV2ZW50cyBtdWx0aXBsZSBjb25uZWN0aW9ucyBkdXJpbmcgaG90IHJlbG9hZGluZyBpbiBkZXZlbG9wbWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IHByaXNtYSA9XG4gIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPz9cbiAgbmV3IFByaXNtYUNsaWVudCh7XG4gICAgbG9nOiBbXG4gICAgICB7IGVtaXQ6ICdldmVudCcsIGxldmVsOiAnZXJyb3InIH0sXG4gICAgICB7IGVtaXQ6ICdldmVudCcsIGxldmVsOiAnd2FybicgfSxcbiAgICBdLFxuICB9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA9IHByaXNtYTtcbn1cblxuY29uc3QgcmVnaXN0ZXJMb2dIYW5kbGVyID0gcHJpc21hLiRvbi5iaW5kKHByaXNtYSkgYXMgKFxuICBldmVudFR5cGU6ICd3YXJuJyB8ICdlcnJvcicsXG4gIGNhbGxiYWNrOiAoZXZlbnQ6IFByaXNtYS5Mb2dFdmVudCkgPT4gdm9pZCxcbikgPT4gUHJpc21hQ2xpZW50O1xuXG5yZWdpc3RlckxvZ0hhbmRsZXIoJ2Vycm9yJywgKGU6IFByaXNtYS5Mb2dFdmVudCkgPT4ge1xuICBsb2dnZXIuZXJyb3IoeyB0YXJnZXQ6IGUudGFyZ2V0LCBtZXNzYWdlOiBlLm1lc3NhZ2UgfSwgJ0RhdGFiYXNlIGVycm9yJyk7XG59KTtcblxucmVnaXN0ZXJMb2dIYW5kbGVyKCd3YXJuJywgKGU6IFByaXNtYS5Mb2dFdmVudCkgPT4ge1xuICBsb2dnZXIud2Fybih7IG1lc3NhZ2U6IGUubWVzc2FnZSB9LCAnRGF0YWJhc2Ugd2FybmluZycpO1xufSk7XG5cbi8qKlxuICogQ29ubmVjdHMgdG8gdGhlIGRhdGFiYXNlIGFuZCBsb2dzIHRoZSBvdXRjb21lLlxuICogU2hvdWxkIGJlIGNhbGxlZCBhdCBhcHBsaWNhdGlvbiBzdGFydHVwIHRvIHByb2FjdGl2ZWx5IGluaXRpYWxpemUgdGhlIGNvbm5lY3Rpb24gcG9vbC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgY29ubmVjdGlvbiBmYWlscy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbm5lY3RQcmlzbWEoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgcHJpc21hLiRjb25uZWN0KCk7XG4gICAgbG9nZ2VyLmluZm8oJ1N1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgdG8gdGhlIGRhdGFiYXNlJyk7XG4gIH0gY2F0Y2ggKGVycjogdW5rbm93bikge1xuICAgIGxvZ2dlci5lcnJvcihcbiAgICAgIHtcbiAgICAgICAgZXJyOiBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICBzdGFjazogZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIuc3RhY2sgOiB1bmRlZmluZWQsXG4gICAgICB9LFxuICAgICAgJ0ZhaWxlZCB0byBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZScsXG4gICAgKTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cbiJdfQ==