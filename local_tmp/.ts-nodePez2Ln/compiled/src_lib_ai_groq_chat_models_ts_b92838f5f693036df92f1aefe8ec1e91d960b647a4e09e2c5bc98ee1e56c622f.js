"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatGroq = void 0;
const cuid2_1 = require("@paralleldrive/cuid2");
const groq_sdk_1 = __importDefault(require("groq-sdk"));
const costs_1 = require("../config/costs");
const base_chat_completions_model_1 = require("../core/base_chat_completions_model");
class ChatGroq extends base_chat_completions_model_1.BaseChatCompletionsModel {
    client;
    params;
    constructor(params = {}) {
        const combinedParams = {
            model: 'llama3-70b-8192',
            ...params,
        };
        super(combinedParams);
        this.client = new groq_sdk_1.default({
            apiKey: process.env.GROQ_API_KEY,
        });
        this.structuredOutputToolName = 'json';
        this.params = combinedParams;
    }
    async run(systemPrompt, msgs, traceBuffer, nodeName) {
        const params = this._buildChatCompletionsParams(systemPrompt, msgs);
        const requestOptions = {};
        if (this.params.maxRetries !== undefined) {
            requestOptions.maxRetries = this.params.maxRetries;
        }
        if (this.params.timeout !== undefined) {
            requestOptions.timeout = this.params.timeout;
        }
        const nodeRun = traceBuffer.nodeRuns.find((ne) => ne.nodeName === nodeName && !ne.endTime);
        if (!nodeRun) {
            throw new Error(`Could not find an active node execution for nodeName: ${nodeName}`);
        }
        const startTime = new Date();
        const llmTrace = {
            id: (0, cuid2_1.createId)(),
            nodeRunId: nodeRun.id,
            model: this.params.model,
            inputMessages: params.messages,
            rawRequest: params,
            startTime,
        };
        let response;
        try {
            response = (await this.client.chat.completions.create(params, requestOptions));
        }
        catch (err) {
            const endTime = new Date();
            const message = err instanceof Error ? err.message : String(err);
            const stack = err instanceof Error ? err.stack : undefined;
            llmTrace.errorTrace = stack ?? message;
            llmTrace.endTime = endTime;
            llmTrace.durationMs = endTime.getTime() - startTime.getTime();
            traceBuffer.llmTraces.push(llmTrace);
            throw err;
        }
        const { assistant, toolCalls } = this._processChatCompletionsResponse(response);
        const endTime = new Date();
        let costUsd = null;
        const modelCosts = costs_1.MODEL_COSTS[this.params.model];
        if (modelCosts) {
            const promptTokens = response.usage?.prompt_tokens ?? 0;
            const completionTokens = response.usage?.completion_tokens ?? 0;
            const inputCost = (promptTokens / 1_000_000) * modelCosts.input;
            const outputCost = (completionTokens / 1_000_000) * modelCosts.output;
            costUsd = inputCost + outputCost;
        }
        llmTrace.rawResponse = response;
        llmTrace.outputMessage = assistant.toJSON();
        llmTrace.promptTokens = response.usage?.prompt_tokens ?? null;
        llmTrace.completionTokens = response.usage?.completion_tokens ?? null;
        llmTrace.totalTokens = response.usage?.total_tokens ?? null;
        llmTrace.costUsd = costUsd ?? null;
        llmTrace.endTime = endTime;
        llmTrace.durationMs = endTime.getTime() - startTime.getTime();
        traceBuffer.llmTraces.push(llmTrace);
        return {
            assistant,
            toolCalls,
            raw: response,
        };
    }
    _buildChatCompletionsParams(systemPrompt, msgs) {
        const params = super._buildChatCompletionsParams(systemPrompt, msgs);
        params.messages = params.messages.map((m) => {
            if (m.role === 'user' && Array.isArray(m.content)) {
                return {
                    ...m,
                    content: m.content
                        .filter((c) => c.type === 'text')
                        .map((c) => c.text)
                        .join(''),
                };
            }
            return m;
        });
        return params;
    }
}
exports.ChatGroq = ChatGroq;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,