"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Vzci9zcmMvYXBwL3NyYy9saWIvYWkvY29yZS9ydW5uYWJsZXMudHMiLCJzb3VyY2VzIjpbIi91c3Ivc3JjL2FwcC9zcmMvbGliL2FpL2NvcmUvcnVubmFibGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFjZUJ1ZmZlciB9IGZyb20gJy4uLy4uLy4uL2FnZW50L3RyYWNpbmcnO1xuaW1wb3J0IHsgQmFzZU1lc3NhZ2UsIFN5c3RlbU1lc3NhZ2UgfSBmcm9tICcuL21lc3NhZ2VzJztcbmltcG9ydCB7IFRvb2xDYWxsIH0gZnJvbSAnLi90b29scyc7XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgY29yZSBwYXJhbWV0ZXJzIGZvciBjb25maWd1cmluZyBhIGNoYXQgbW9kZWwgaW5zdGFuY2UuXG4gKiBUaGVzZSBwYXJhbWV0ZXJzIGNvbnRyb2wgdGhlIG1vZGVsJ3MgYmVoYXZpb3IgZHVyaW5nIGdlbmVyYXRpb24uXG4gKi9cbmV4cG9ydCB0eXBlIENoYXRNb2RlbFBhcmFtcyA9IHtcbiAgLyoqIFRoZSBzcGVjaWZpYyBtb2RlbCBpZGVudGlmaWVyIHRvIHVzZSBmb3IgdGhlIGNoYXQgY29tcGxldGlvbi4gKi9cbiAgbW9kZWw6IHN0cmluZztcbiAgLyoqXG4gICAqIENvbnRyb2xzIHJhbmRvbW5lc3MgaW4gdGhlIG91dHB1dC4gQSBsb3dlciB2YWx1ZSAoZS5nLiwgMC4yKSBtYWtlcyB0aGVcbiAgICogbW9kZWwgbW9yZSBkZXRlcm1pbmlzdGljLCB3aGlsZSBhIGhpZ2hlciB2YWx1ZSAoZS5nLiwgMC44KSBtYWtlcyBpdCBtb3JlIGNyZWF0aXZlLlxuICAgKi9cbiAgdGVtcGVyYXR1cmU/OiBudW1iZXI7XG4gIC8qKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIHRvIGdlbmVyYXRlIGluIHRoZSByZXNwb25zZS4gKi9cbiAgbWF4VG9rZW5zPzogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIG51Y2xldXMgc2FtcGxpbmcgcHJvYmFiaWxpdHkuIFRoZSBtb2RlbCB3aWxsIG9ubHkgY29uc2lkZXIgdG9rZW5zXG4gICAqIHdpdGggYSBjdW11bGF0aXZlIHByb2JhYmlsaXR5IG9mIGB0b3BQYC4gKGUuZy4sIDAuOSBtZWFucyB0b3AgOTAlIHByb2JhYmlsaXR5IG1hc3MpLlxuICAgKi9cbiAgdG9wUD86IG51bWJlcjtcbiAgLyoqIEFuIGFycmF5IG9mIHNlcXVlbmNlcyB0aGF0IHdpbGwgc3RvcCB0aGUgbW9kZWwncyBnZW5lcmF0aW9uLiAqL1xuICBzdG9wPzogc3RyaW5nIHwgc3RyaW5nW107XG4gIC8qKiBBIHNlZWQgZm9yIGVuc3VyaW5nIHJlcHJvZHVjaWJsZSBvdXRwdXRzIHdoZW4gdGVtcGVyYXR1cmUgaXMgbm9uLXplcm8uICovXG4gIHNlZWQ/OiBudW1iZXI7XG59O1xuXG4vLyAtLS0gUHJvdmlkZXIgU3BlY2lmaWMgUGFyYW1zIC0tLVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5BSUNoYXRNb2RlbFBhcmFtcyBleHRlbmRzIENoYXRNb2RlbFBhcmFtcyB7XG4gIC8qKlxuICAgKiAoT3BlbkFJLXNwZWNpZmljKSBFbmFibGVzIHJlYXNvbmluZyBzdGVwcyBvciBjaGFpbi1vZi10aG91Z2h0LFxuICAgKiB3aGljaCBjYW4gaW1wcm92ZSBwZXJmb3JtYW5jZSBvbiBjb21wbGV4IHRhc2tzLlxuICAgKiBPbmx5IGFwcGxpY2FibGUgd2hlbiBgdXNlUmVzcG9uc2VzQXBpYCBpcyBgdHJ1ZWAuXG4gICAqL1xuICByZWFzb25pbmc/OiB7IGVmZm9ydDogJ21pbmltYWwnIHwgJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB9O1xuICAvKipcbiAgICogKE9wZW5BSS1zcGVjaWZpYykgVG9nZ2xlcyBiZXR3ZWVuIHRoZSBSZXNwb25zZXMgQVBJIGFuZCB0aGUgQ2hhdCBDb21wbGV0aW9ucyBBUEkuXG4gICAqIERlZmF1bHRzIHRvIGBmYWxzZWAgKENoYXQgQ29tcGxldGlvbnMgQVBJKS5cbiAgICovXG4gIHVzZVJlc3BvbnNlc0FwaT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiAoT3BlbkFJLXNwZWNpZmljKSBBbiBvYmplY3Qgc3BlY2lmeWluZyB0aGUgZm9ybWF0IHRoYXQgdGhlIG1vZGVsIG11c3Qgb3V0cHV0LlxuICAgKiBTZXR0aW5nIHRvIGB7IHR5cGU6IFwianNvbl9vYmplY3RcIiB9YCBlbmFibGVzIEpTT04gbW9kZS5cbiAgICogT25seSBhcHBsaWNhYmxlIGZvciBDaGF0IENvbXBsZXRpb25zIEFQSS5cbiAgICovXG4gIHJlc3BvbnNlRm9ybWF0PzogeyB0eXBlOiAndGV4dCcgfCAnanNvbl9vYmplY3QnIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR3JvcUNoYXRNb2RlbFBhcmFtcyBleHRlbmRzIENoYXRNb2RlbFBhcmFtcyB7XG4gIC8qKlxuICAgKiAoR3JvcS1zcGVjaWZpYykgVGhlIG1heGltdW0gbnVtYmVyIG9mIHRpbWVzIHRvIHJldHJ5IGEgcmVxdWVzdCBpZiBpdCBmYWlscy5cbiAgICogRGVmYXVsdHMgdG8gMi5cbiAgICovXG4gIG1heFJldHJpZXM/OiBudW1iZXI7XG4gIC8qKlxuICAgKiAoR3JvcS1zcGVjaWZpYykgVGhlIG1heGltdW0gdGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgYSByZXNwb25zZSBmcm9tIHRoZSBBUEkuXG4gICAqIERlZmF1bHRzIHRvIDEgbWludXRlLlxuICAgKi9cbiAgdGltZW91dD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBmaW5hbCBvdXRjb21lIG9mIGEgbW9kZWwgcnVuLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCByZXN1bHQ6IFJ1bk91dGNvbWUgPSB7XG4gKiAgIGFzc2lzdGFudDogbmV3IEFzc2lzdGFudE1lc3NhZ2UoJ1RoZSB3ZWF0aGVyIGluIE5ZQyBpcyBzdW5ueS4nKSxcbiAqICAgdG9vbENhbGxzOiBbXG4gKiAgICAgeyBpZDogJ2NhbGxfMTIzJywgbmFtZTogJ2dldF93ZWF0aGVyJywgYXJndW1lbnRzOiB7IGxvY2F0aW9uOiAnTllDJyB9IH1cbiAqICAgXSxcbiAqICAgcmF3OiBvcGVuQUlSZXNwb25zZU9iamVjdCAvLyBUaGUgb3JpZ2luYWwgcmVzcG9uc2UgZnJvbSB0aGUgcHJvdmlkZXJcbiAqIH07XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSdW5PdXRjb21lIHtcbiAgLyoqIFRoZSBhc3Npc3RhbnQncyByZXNwb25zZSBtZXNzYWdlLiAqL1xuICBhc3Npc3RhbnQ6IEJhc2VNZXNzYWdlO1xuICAvKiogQW4gYXJyYXkgb2YgdG9vbCBjYWxscyByZXF1ZXN0ZWQgYnkgdGhlIGFzc2lzdGFudC4gRW1wdHkgd2hlbiBub25lIHdlcmUgbWFkZS4gKi9cbiAgdG9vbENhbGxzOiBUb29sQ2FsbFtdO1xuICAvKiogVGhlIHJhdywgdW5tb2RpZmllZCByZXNwb25zZSBmcm9tIHRoZSBMTE0gcHJvdmlkZXIgZm9yIGRlYnVnZ2luZy4gKi9cbiAgcmF3OiB1bmtub3duO1xufVxuXG4vKipcbiAqIERlZmluZXMgdGhlIGludGVyZmFjZSBmb3IgYSBtb2RlbCBydW5uZXIsIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciBleGVjdXRpbmdcbiAqIGEgY29udmVyc2F0aW9uIGFnYWluc3QgYW4gTExNIGFuZCByZXR1cm5pbmcgdGhlIHJlc3VsdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY2xhc3MgTXlNb2RlbFJ1bm5lciBpbXBsZW1lbnRzIE1vZGVsUnVubmVyIHtcbiAqICAgYXN5bmMgcnVuKFxuICogICAgIHN5c3RlbVByb21wdDogU3lzdGVtTWVzc2FnZSxcbiAqICAgICBtZXNzYWdlczogQmFzZU1lc3NhZ2VbXSxcbiAqICAgICB0cmFjZUJ1ZmZlcjogVHJhY2VCdWZmZXIsXG4gKiAgICAgbm9kZU5hbWU6IHN0cmluZyxcbiAqICAgKTogUHJvbWlzZTxSdW5PdXRjb21lPiB7XG4gKiAgICAgLy8gTG9naWMgdG8gY2FsbCBhIHNwZWNpZmljIExMTSBwcm92aWRlclxuICogICAgIHJldHVybiB7XG4gKiAgICAgICBhc3Npc3RhbnQ6IG5ldyBBc3Npc3RhbnRNZXNzYWdlKCdSZXNwb25zZSBmcm9tIG15IGN1c3RvbSBtb2RlbCcpLFxuICogICAgICAgdG9vbENhbGxzOiBbXSxcbiAqICAgICAgIHJhdzogcmVzcG9uc2UsXG4gKiAgICAgfTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWxSdW5uZXIge1xuICAvKipcbiAgICogUnVucyB0aGUgbW9kZWwgd2l0aCB0aGUgZ2l2ZW4gY29udmVyc2F0aW9uIGhpc3RvcnkuXG4gICAqXG4gICAqIEBwYXJhbSBzeXN0ZW1Qcm9tcHQgVGhlIHN5c3RlbSBwcm9tcHQgdG8gZ3VpZGUgdGhlIG1vZGVsJ3MgYmVoYXZpb3IuXG4gICAqIEBwYXJhbSBtZXNzYWdlcyBUaGUgYXJyYXkgb2YgbWVzc2FnZXMgcmVwcmVzZW50aW5nIHRoZSBjb252ZXJzYXRpb24gaGlzdG9yeS5cbiAgICogQHBhcmFtIHRyYWNlQnVmZmVyIFRoZSBidWZmZXIgdG8gc3RvcmUgdHJhY2UgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSBub2RlTmFtZSBUaGUgbmFtZSBvZiB0aGUgZ3JhcGggbm9kZSBtYWtpbmcgdGhpcyBjYWxsLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgb3V0Y29tZSBvZiB0aGUgbW9kZWwgcnVuLlxuICAgKi9cbiAgcnVuKFxuICAgIHN5c3RlbVByb21wdDogU3lzdGVtTWVzc2FnZSxcbiAgICBtZXNzYWdlczogQmFzZU1lc3NhZ2VbXSxcbiAgICB0cmFjZUJ1ZmZlcjogVHJhY2VCdWZmZXIsXG4gICAgbm9kZU5hbWU6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxSdW5PdXRjb21lPjtcbn1cbiJdfQ==