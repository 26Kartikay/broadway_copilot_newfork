"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatOpenAI = void 0;
const cuid2_1 = require("@paralleldrive/cuid2");
const openai_1 = __importDefault(require("openai"));
const zod_1 = __importDefault(require("zod"));
const costs_1 = require("../config/costs");
const base_chat_completions_model_1 = require("../core/base_chat_completions_model");
const messages_1 = require("../core/messages");
const tools_1 = require("../core/tools");
class ChatOpenAI extends base_chat_completions_model_1.BaseChatCompletionsModel {
    client;
    params;
    constructor(params = {}) {
        const combinedParams = {
            model: 'gpt-4.1',
            useResponsesApi: false,
            ...params,
        };
        super(combinedParams);
        this.client = new openai_1.default();
        this.params = combinedParams;
    }
    async run(systemPrompt, msgs, traceBuffer, nodeName) {
        if (this.params.useResponsesApi) {
            return this._runResponses(systemPrompt, msgs, traceBuffer, nodeName);
        }
        return this._runChatCompletions(systemPrompt, msgs, traceBuffer, nodeName);
    }
    async _runResponses(systemPrompt, msgs, traceBuffer, nodeName) {
        const params = this._buildResponsesParams(systemPrompt, msgs);
        const nodeRun = traceBuffer.nodeRuns.find((ne) => ne.nodeName === nodeName && !ne.endTime);
        if (!nodeRun) {
            throw new Error(`Could not find an active node execution for nodeName: ${nodeName}`);
        }
        const startTime = new Date();
        const llmTrace = {
            id: (0, cuid2_1.createId)(),
            nodeRunId: nodeRun.id,
            model: this.params.model,
            inputMessages: params.input,
            rawRequest: params,
            startTime,
        };
        let response;
        try {
            response = await this.client.responses.create(params);
        }
        catch (err) {
            const endTime = new Date();
            const message = err instanceof Error ? err.message : String(err);
            const stack = err instanceof Error ? err.stack : undefined;
            llmTrace.errorTrace = stack ?? message;
            llmTrace.endTime = endTime;
            llmTrace.durationMs = endTime.getTime() - startTime.getTime();
            traceBuffer.llmTraces.push(llmTrace);
            throw err;
        }
        const { assistantContent, toolCalls, rawToolCalls } = this._processResponsesResponse(response);
        const assistant = new messages_1.AssistantMessage(assistantContent);
        assistant.meta = { raw: response };
        if (toolCalls.length > 0) {
            assistant.meta.tool_calls = toolCalls;
        }
        if (rawToolCalls.length > 0) {
            assistant.meta.raw_tool_calls = rawToolCalls;
        }
        const endTime = new Date();
        llmTrace.rawResponse = response;
        llmTrace.outputMessage = assistant.toJSON();
        llmTrace.promptTokens = response.usage?.total_tokens ?? null;
        llmTrace.completionTokens = 0;
        llmTrace.totalTokens = response.usage?.total_tokens ?? null;
        llmTrace.endTime = endTime;
        llmTrace.durationMs = endTime.getTime() - startTime.getTime();
        traceBuffer.llmTraces.push(llmTrace);
        return {
            assistant,
            toolCalls,
            raw: response,
        };
    }
    async _runChatCompletions(systemPrompt, msgs, traceBuffer, nodeName) {
        const params = this._buildChatCompletionsParams(systemPrompt, msgs);
        const nodeRun = traceBuffer.nodeRuns.find((ne) => ne.nodeName === nodeName && !ne.endTime);
        if (!nodeRun) {
            throw new Error(`Could not find an active node execution for nodeName: ${nodeName}`);
        }
        const startTime = new Date();
        const llmTrace = {
            id: (0, cuid2_1.createId)(),
            nodeRunId: nodeRun.id,
            model: this.params.model,
            inputMessages: params.messages,
            rawRequest: params,
            startTime,
        };
        let response;
        try {
            response = await this.client.chat.completions.create(params);
        }
        catch (err) {
            const endTime = new Date();
            const message = err instanceof Error ? err.message : String(err);
            const stack = err instanceof Error ? err.stack : undefined;
            llmTrace.errorTrace = stack ?? message;
            llmTrace.endTime = endTime;
            llmTrace.durationMs = endTime.getTime() - startTime.getTime();
            traceBuffer.llmTraces.push(llmTrace);
            throw err;
        }
        const { assistant, toolCalls } = this._processChatCompletionsResponse(response);
        const endTime = new Date();
        let costUsd = null;
        const modelCosts = costs_1.MODEL_COSTS[this.params.model];
        if (modelCosts) {
            const promptTokens = response.usage?.prompt_tokens ?? 0;
            const completionTokens = response.usage?.completion_tokens ?? 0;
            const inputCost = (promptTokens / 1_000_000) * modelCosts.input;
            const outputCost = (completionTokens / 1_000_000) * modelCosts.output;
            costUsd = inputCost + outputCost;
        }
        llmTrace.rawResponse = response;
        llmTrace.outputMessage = assistant.toJSON();
        llmTrace.promptTokens = response.usage?.prompt_tokens ?? null;
        llmTrace.completionTokens = response.usage?.completion_tokens ?? null;
        llmTrace.totalTokens = response.usage?.total_tokens ?? null;
        llmTrace.costUsd = costUsd ?? null;
        llmTrace.endTime = endTime;
        llmTrace.durationMs = endTime.getTime() - startTime.getTime();
        traceBuffer.llmTraces.push(llmTrace);
        return {
            assistant,
            toolCalls,
            raw: response,
        };
    }
    _buildResponsesParams(systemPrompt, msgs) {
        const instructions = systemPrompt.content
            .filter((p) => p.type === 'text')
            .map((p) => p.text)
            .join('');
        const input = msgs.flatMap((m) => {
            if (m.role === 'tool') {
                return {
                    type: 'function_call_output',
                    call_id: m.tool_call_id,
                    output: m.content
                        .filter((p) => p.type === 'text')
                        .map((p) => p.text)
                        .join(''),
                };
            }
            if (m.role === 'assistant') {
                const items = [];
                const textContent = m.content
                    .filter((p) => p.type === 'text')
                    .map((p) => p.text)
                    .join('')
                    .trim();
                if (textContent) {
                    items.push({
                        role: 'assistant',
                        content: textContent,
                    });
                }
                const rawToolCalls = m.meta?.raw_tool_calls;
                if (rawToolCalls?.length) {
                    items.push(...rawToolCalls);
                }
                return items;
            }
            return {
                role: 'user',
                content: m.content.map((c) => {
                    if (c.type === 'text') {
                        return { type: 'input_text', text: c.text };
                    }
                    return {
                        type: 'input_image',
                        image_url: c.image_url.url,
                        detail: c.image_url.detail ?? 'auto',
                    };
                }),
            };
        });
        const tools = this.boundTools.map(tools_1.toOpenAIToolSpec);
        const params = {
            model: this.params.model,
            input,
            stream: false,
        };
        if (this.params.temperature !== undefined) {
            params.temperature = this.params.temperature;
        }
        if (this.params.maxTokens !== undefined) {
            params.max_output_tokens = this.params.maxTokens;
        }
        if (this.params.topP !== undefined) {
            params.top_p = this.params.topP;
        }
        if (instructions) {
            params.instructions = instructions;
        }
        if (this.params.reasoning) {
            params.reasoning = this.params.reasoning;
        }
        if (tools.length > 0) {
            params.tools = tools;
            params.tool_choice = 'auto';
        }
        if (this.structuredOutputSchema) {
            const toolName = this.structuredOutputToolName;
            const tool = {
                type: 'function',
                name: toolName,
                description: 'Structured output formatter',
                parameters: zod_1.default.toJSONSchema(this.structuredOutputSchema),
                strict: true,
            };
            params.tools = [...(params.tools ?? []), tool];
            params.tool_choice = {
                type: 'function',
                name: toolName,
            };
        }
        return params;
    }
    _buildChatCompletionsParams(systemPrompt, msgs) {
        const params = super._buildChatCompletionsParams(systemPrompt, msgs);
        if (this.params.responseFormat) {
            params.response_format = this.params.responseFormat;
        }
        return params;
    }
    _processResponsesResponse(response) {
        const assistantContent = response.output_text ?? '';
        const output = response.output ?? [];
        const rawToolCalls = output.filter((item) => item?.type === 'function_call');
        const toolCalls = rawToolCalls.map((item) => {
            try {
                return {
                    id: item.call_id,
                    name: item.name,
                    arguments: item.arguments ? JSON.parse(item.arguments) : {},
                };
            }
            catch (e) {
                throw new Error(`Failed to parse arguments for ${item.name}: ${e}`);
            }
        });
        return {
            assistantContent,
            toolCalls,
            rawToolCalls,
        };
    }
}
exports.ChatOpenAI = ChatOpenAI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,