"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolMessage = exports.AssistantMessage = exports.UserMessage = exports.SystemMessage = exports.BaseMessage = void 0;
class BaseMessage {
    role;
    content;
    name;
    tool_call_id;
    meta;
    constructor(role, content, name, tool_call_id, meta) {
        this.role = role;
        this.content = typeof content === 'string' ? [{ type: 'text', text: content }] : content;
        if (name !== undefined) {
            this.name = name;
        }
        if (tool_call_id !== undefined) {
            this.tool_call_id = tool_call_id;
        }
        if (meta !== undefined) {
            this.meta = meta;
        }
    }
    toJSON() {
        return {
            role: this.role,
            content: this.content,
            name: this.name,
            tool_call_id: this.tool_call_id,
            meta: this.meta,
        };
    }
}
exports.BaseMessage = BaseMessage;
class SystemMessage extends BaseMessage {
    constructor(content) {
        super('system', content);
    }
}
exports.SystemMessage = SystemMessage;
class UserMessage extends BaseMessage {
    constructor(content) {
        super('user', content);
    }
}
exports.UserMessage = UserMessage;
class AssistantMessage extends BaseMessage {
    constructor(content) {
        super('assistant', content);
    }
}
exports.AssistantMessage = AssistantMessage;
class ToolMessage extends BaseMessage {
    constructor(content, tool_call_id, name, isError) {
        super('tool', content, name, tool_call_id, { isError });
    }
    get isError() {
        return this.meta?.isError === true;
    }
}
exports.ToolMessage = ToolMessage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Vzci9zcmMvYXBwL3NyYy9saWIvYWkvY29yZS9tZXNzYWdlcy50cyIsInNvdXJjZXMiOlsiL3Vzci9zcmMvYXBwL3NyYy9saWIvYWkvY29yZS9tZXNzYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUF5Q0EsTUFBYSxXQUFXO0lBQ3RCLElBQUksQ0FBTztJQUNYLE9BQU8sQ0FBaUI7SUFDeEIsSUFBSSxDQUFVO0lBQ2QsWUFBWSxDQUFVO0lBQ3RCLElBQUksQ0FBMkI7SUFFL0IsWUFDRSxJQUFVLEVBQ1YsT0FBZ0MsRUFDaEMsSUFBYSxFQUNiLFlBQXFCLEVBQ3JCLElBQThCO1FBRTlCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3pGLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ25CLENBQUM7UUFDRCxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNuQyxDQUFDO1FBQ0QsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbkIsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTztZQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDL0IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2hCLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFwQ0Qsa0NBb0NDO0FBVUQsTUFBYSxhQUFjLFNBQVEsV0FBVztJQUM1QyxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUFKRCxzQ0FJQztBQWtCRCxNQUFhLFdBQVksU0FBUSxXQUFXO0lBQzFDLFlBQVksT0FBZ0M7UUFDMUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6QixDQUFDO0NBQ0Y7QUFKRCxrQ0FJQztBQVVELE1BQWEsZ0JBQWlCLFNBQVEsV0FBVztJQUMvQyxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUFKRCw0Q0FJQztBQWVELE1BQWEsV0FBWSxTQUFRLFdBQVc7SUFDMUMsWUFBWSxPQUFlLEVBQUUsWUFBb0IsRUFBRSxJQUFhLEVBQUUsT0FBaUI7UUFDakYsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUtELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEtBQUssSUFBSSxDQUFDO0lBQ3JDLENBQUM7Q0FDRjtBQVhELGtDQVdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZWZpbmVzIHRoZSBwb3NzaWJsZSByb2xlcyBpbiBhIGNvbnZlcnNhdGlvbi5cbiAqL1xuZXhwb3J0IHR5cGUgUm9sZSA9ICdzeXN0ZW0nIHwgJ3VzZXInIHwgJ2Fzc2lzdGFudCcgfCAndG9vbCc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHRleHQgcGFydCBvZiBhIG1lc3NhZ2UncyBjb250ZW50LlxuICovXG5leHBvcnQgdHlwZSBUZXh0UGFydCA9IHtcbiAgdHlwZTogJ3RleHQnO1xuICB0ZXh0OiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gaW1hZ2UgcGFydCBvZiBhIG1lc3NhZ2UncyBjb250ZW50LlxuICovXG5leHBvcnQgdHlwZSBJbWFnZVBhcnQgPSB7XG4gIHR5cGU6ICdpbWFnZV91cmwnO1xuICBpbWFnZV91cmw6IHtcbiAgICAvKiogVGhlIFVSTCBvZiB0aGUgaW1hZ2UsIHdoaWNoIGNhbiBiZSBhIHdlYiBVUkwgb3IgYSBiYXNlNjQtZW5jb2RlZCBkYXRhIFVSSS4gKi9cbiAgICB1cmw6IHN0cmluZztcbiAgICAvKiogVGhlIGxldmVsIG9mIGRldGFpbCB0byB1c2UgZm9yIHRoZSBpbWFnZS4gRGVmYXVsdHMgdG8gJ2F1dG8nLiAqL1xuICAgIGRldGFpbD86ICdsb3cnIHwgJ2hpZ2gnIHwgJ2F1dG8nO1xuICB9O1xufTtcblxuLyoqXG4gKiBBIHVuaW9uIHR5cGUgcmVwcmVzZW50aW5nIGEgcGFydCBvZiBhIG1lc3NhZ2UncyBjb250ZW50LCB3aGljaCBjYW4gYmUgZWl0aGVyIHRleHQgb3IgYW4gaW1hZ2UuXG4gKiBUaGlzIGFsbG93cyBmb3IgY3JlYXRpbmcgbXVsdGktbW9kYWwgbWVzc2FnZXMuXG4gKi9cbmV4cG9ydCB0eXBlIE1lc3NhZ2VDb250ZW50UGFydCA9IFRleHRQYXJ0IHwgSW1hZ2VQYXJ0O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGNvbnRlbnQgb2YgYSBtZXNzYWdlLCB3aGljaCBpcyBhbiBhcnJheSBvZiBwYXJ0cyAodGV4dCBvciBpbWFnZSkuXG4gKi9cbmV4cG9ydCB0eXBlIE1lc3NhZ2VDb250ZW50ID0gTWVzc2FnZUNvbnRlbnRQYXJ0W107XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIG1lc3NhZ2UgdHlwZXMsIGRlZmluaW5nIHRoZSBjb21tb24gc3RydWN0dXJlIG9mIGByb2xlYCBhbmQgYGNvbnRlbnRgLlxuICogSXQncyBub3QgdHlwaWNhbGx5IHVzZWQgZGlyZWN0bHksIGJ1dCBleHRlbmRlZCBieSBzcGVjaWZpYyBtZXNzYWdlIGNsYXNzZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlTWVzc2FnZSB7XG4gIHJvbGU6IFJvbGU7XG4gIGNvbnRlbnQ6IE1lc3NhZ2VDb250ZW50O1xuICBuYW1lPzogc3RyaW5nO1xuICB0b29sX2NhbGxfaWQ/OiBzdHJpbmc7XG4gIG1ldGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICByb2xlOiBSb2xlLFxuICAgIGNvbnRlbnQ6IHN0cmluZyB8IE1lc3NhZ2VDb250ZW50LFxuICAgIG5hbWU/OiBzdHJpbmcsXG4gICAgdG9vbF9jYWxsX2lkPzogc3RyaW5nLFxuICAgIG1ldGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgKSB7XG4gICAgdGhpcy5yb2xlID0gcm9sZTtcbiAgICB0aGlzLmNvbnRlbnQgPSB0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycgPyBbeyB0eXBlOiAndGV4dCcsIHRleHQ6IGNvbnRlbnQgfV0gOiBjb250ZW50O1xuICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGlmICh0b29sX2NhbGxfaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50b29sX2NhbGxfaWQgPSB0b29sX2NhbGxfaWQ7XG4gICAgfVxuICAgIGlmIChtZXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMubWV0YSA9IG1ldGE7XG4gICAgfVxuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICByb2xlOiB0aGlzLnJvbGUsXG4gICAgICBjb250ZW50OiB0aGlzLmNvbnRlbnQsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICB0b29sX2NhbGxfaWQ6IHRoaXMudG9vbF9jYWxsX2lkLFxuICAgICAgbWV0YTogdGhpcy5tZXRhLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc3lzdGVtIG1lc3NhZ2UsIHdoaWNoIHByb3ZpZGVzIGluc3RydWN0aW9ucyBvciBjb250ZXh0IHRvIHRoZSBtb2RlbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3Qgc3lzdGVtTXNnID0gbmV3IFN5c3RlbU1lc3NhZ2UoJ1lvdSBhcmUgYSBoZWxwZnVsIGNvZGluZyBhc3Npc3RhbnQuJyk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFN5c3RlbU1lc3NhZ2UgZXh0ZW5kcyBCYXNlTWVzc2FnZSB7XG4gIGNvbnN0cnVjdG9yKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIHN1cGVyKCdzeXN0ZW0nLCBjb250ZW50KTtcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSB1c2VyIG1lc3NhZ2UgaW4gYSBjb252ZXJzYXRpb24uIFRoaXMgY2FuIGNvbnRhaW4gZWl0aGVyIGEgc2ltcGxlXG4gKiBzdHJpbmcgb3IgYW4gYXJyYXkgb2YgY29udGVudCBwYXJ0cyBmb3IgbXVsdGktbW9kYWwgaW5wdXQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIFNpbXBsZSB0ZXh0IG1lc3NhZ2VcbiAqIGNvbnN0IHVzZXJNc2cgPSBuZXcgVXNlck1lc3NhZ2UoJ1doYXQgaXMgdGhlIHdlYXRoZXIgbGlrZT8nKTtcbiAqXG4gKiAvLyBNZXNzYWdlIHdpdGggYW4gaW1hZ2VcbiAqIGNvbnN0IHVzZXJXaXRoSW1hZ2UgPSBuZXcgVXNlck1lc3NhZ2UoW1xuICogICB7IHR5cGU6ICd0ZXh0JywgdGV4dDogJ1doYXQgZG8geW91IHNlZSBpbiB0aGlzIGltYWdlPycgfSxcbiAqICAgeyB0eXBlOiAnaW1hZ2VfdXJsJywgaW1hZ2VfdXJsOiB7IHVybDogJ2RhdGE6aW1hZ2UvanBlZztiYXNlNjQsLi4uJyB9IH1cbiAqIF0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBVc2VyTWVzc2FnZSBleHRlbmRzIEJhc2VNZXNzYWdlIHtcbiAgY29uc3RydWN0b3IoY29udGVudDogc3RyaW5nIHwgTWVzc2FnZUNvbnRlbnQpIHtcbiAgICBzdXBlcigndXNlcicsIGNvbnRlbnQpO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBhc3Npc3RhbnQncyByZXNwb25zZSBpbiBhIGNvbnZlcnNhdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgYXNzaXN0YW50TXNnID0gbmV3IEFzc2lzdGFudE1lc3NhZ2UoJ1RoZSB3ZWF0aGVyIGlzIHN1bm55IGFuZCB3YXJtIHRvZGF5LicpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBBc3Npc3RhbnRNZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICBjb25zdHJ1Y3Rvcihjb250ZW50OiBzdHJpbmcpIHtcbiAgICBzdXBlcignYXNzaXN0YW50JywgY29udGVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSByZXN1bHQgb2YgYSB0b29sIGV4ZWN1dGlvbi4gSXQgaW5jbHVkZXMgdGhlIHRvb2wncyBvdXRwdXRcbiAqICh1c3VhbGx5IGFzIGEgc3RyaW5naWZpZWQgSlNPTiBvYmplY3QpIGFuZCB0aGUgSUQgb2YgdGhlIHRvb2wgY2FsbCBpdCBjb3JyZXNwb25kcyB0by5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogLy8gU3VjY2Vzc2Z1bCB0b29sIHJlc3VsdFxuICogY29uc3QgdG9vbE1zZyA9IG5ldyBUb29sTWVzc2FnZSgne1widGVtcGVyYXR1cmVcIjogNzJ9JywgJ2NhbGxfMTIzJywgJ2dldF93ZWF0aGVyJyk7XG4gKlxuICogLy8gRXJyb3IgdG9vbCByZXN1bHRcbiAqIGNvbnN0IGVycm9yTXNnID0gbmV3IFRvb2xNZXNzYWdlKCdUb29sIGZhaWxlZCB0byBleGVjdXRlJywgJ2NhbGxfNDU2JywgJ2dldF93ZWF0aGVyJywgdHJ1ZSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFRvb2xNZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICBjb25zdHJ1Y3Rvcihjb250ZW50OiBzdHJpbmcsIHRvb2xfY2FsbF9pZDogc3RyaW5nLCBuYW1lPzogc3RyaW5nLCBpc0Vycm9yPzogYm9vbGVhbikge1xuICAgIHN1cGVyKCd0b29sJywgY29udGVudCwgbmFtZSwgdG9vbF9jYWxsX2lkLCB7IGlzRXJyb3IgfSk7XG4gIH1cblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBnZXR0ZXIgdG8gY2hlY2sgaWYgdGhlIHRvb2wgZXhlY3V0aW9uIHJlc3VsdGVkIGluIGFuIGVycm9yLlxuICAgKi9cbiAgZ2V0IGlzRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubWV0YT8uaXNFcnJvciA9PT0gdHJ1ZTtcbiAgfVxufVxuIl19